//
// I/O Devices
//

stimulus_display 'Stimulus Display' (0, 0, 0)
iodevice/mio mIO (
    data_interval                           = 1ms
    joystick_direction                      = IO_joystickDirection
    joystick_strength                       = IO_joystickStrength
    joystick_x_raw                          = IO_joystickX_raw
    joystick_y_raw                          = IO_joystickY_raw
    reward_a                                = IO_rewardA
    )

eyelink Eyelink (
    data_interval                           = 1ms
    eye_rx                                  = EYE_rightX_raw
    eye_ry                                  = EYE_rightY_raw
    eye_lx                                  = EYE_leftX_raw
    eye_ly                                  = EYE_leftY_raw
    eye_x                                   = EYE_x_raw
    eye_y                                   = EYE_y_raw
    href_rx                                 = EYE_hrefRightX
    href_ry                                 = EYE_hrefRightY
    href_lx                                 = EYE_hrefLeftX
    href_ly                                 = EYE_hrefLeftY
    pupil_rx                                = EYE_pupilRightX
    pupil_ry                                = EYE_pupilRightY
    pupil_lx                                = EYE_pupilLeftX
    pupil_ly                                = EYE_pupilLeftY
    pupil_size_r                            = EYE_pupilRightSize
    pupil_size_l                            = EYE_pupilLeftSize
    eye_time                                = EYE_sampleTime
    tracking_dist                           = 1024
    tracker_ip                              = '100.1.1.1'
    )

standard_eye_calibrator EyeCalibrator (
    eyeh_raw                                = EYE_x_raw
    eyev_raw                                = EYE_y_raw
    eyeh_calibrated                         = EYE_x_dva
    eyev_calibrated                         = EYE_y_dva
    )

basic_eye_monitor EyeMonitor (
    eyeh_calibrated                         = EYE_x_dva
    eyev_calibrated                         = EYE_y_dva
    eye_state                               = EYE_saccade
    width_samples                           = 5
    saccade_entry_speed                     = 50
    saccade_exit_speed                      = 20
    )

//
// Variables
//

group INFO {
    var INFO_task                           = 0
    var INFO_SteadyStateCounter             = 0
    var INFO_CoherenceStateCounter          = 0
    var INFO_TargetCounter                  = 0
    var INFO_HitCounter                     = 0
    var INFO_ErrorCounter                   = 0
    var INFO_Juice_ml                       = 0
}

group CTRL {
	var CTRL_reward_ml                      = 0
    var CTRL_Xmax                           = 15.2024
    var CTRL_Ymax                           = 11.4018
    var CTRL_NoTargets                      = 0
	var CTRL_NoSteadyStates                 = 0
    var CTRL_NoCoherenceStates              = 0 
	var CTRL_steadyState_min_ms             = 0 
    var CTRL_steadyState_max_ms             = 0
    var CTRL_SteadyStateDuration_ms         = 0
    var CTRL_TargetDelay_ms                 = 0
    var CTRL_snr_list                       = [.3,.6,.9]
    var CTRL_directionChange_list           = [30,60,90]
    var CTRL_ITI_ms                         = 0
    var CTRL_change_mangitude               = 0
    var CTRL_cpr_treshold                   = 0

    var CTRL_arc_alpha                      = 0
    var CTRL_arc_flag                       = 0
    var CTRL_arc_size                       = 0
    var CTRL_arcMask_flag                   = 0

	var CTRL_start_area_size                = 0 
    var CTRL_start_area_alpha               = 0
    var CTRL_start_area_flag                = 0
    
    var CTRL_target_idx                     = 0
    var CTRL_target_size                    = 0
    var CTRL_target_deg                     = 0
    var CTRL_target_duration_ms             = 0
    var CTRL_target_direction               = 0
    var CTRL_target_flag                    = 0
    var CTRL_target2_flag                   = 0
    var CTRL_target3_flag                   = 0
    var CTRL_target4_flag                   = 0
    var CTRL_target_x                       = 0
    var CTRL_target2_x                      = 0
    var CTRL_target3_x                      = 0
    var CTRL_target4_x                      = 0
    var CTRL_target_y                       = 0    
    var CTRL_target2_y                      = 0    
    var CTRL_target3_y                      = 0    
    var CTRL_target4_y                      = 0    
    var CTRL_target_alpha                   = .75
    var CTRL_target_offset                  = 8
    var CTRL_target_ITI_ms                  = 0
    var CTRL_target_ban_duration_ms         = 0
   
    var CTRL_feedback_alpha                 = 1 
    var CTRL_feedback_ms                    = 150

    var CTRL_hit_flag 					    = 0
    var CTRL_miss_flag                      = 0

    var CTRL_PreRT_ResponseWindow           = 0
    var CTRL_PreSNR_StimDuration            = 0

    var CTRL_cursor_radius                  = .5

    var CTRL_indicator_size                 = .3
    var CTRL_indicator_offset               = 1.25
    var CTRL_indicator_alpha                = 1

    var CTRL_fixationWidth_dva              = 100
    var CTRL_fixation_duration_ms           = 500
    var CTRL_fixationDotSize_dva            = .5
    var CTRL_fixation_alpha                 = 1
    var CTRL_fixation_size                  = .3
    var CTRL_fixation_break_flag            = 0
    var CTRL_fixation_penalty_flag          = 0
    var CTRL_minFixBreak_duration_ms        = 250
    var CTRL_fixBreak_penalty_duration_ms   = 250
}

group TRIAL {
    var TRIAL_start                         = 0
    var TRIAL_end                           = 0
    var TRIAL_reactionEvent                 = 0
    var TRIAL_reactionEvent_ts              = 0
    var TRIAL_reactionTrigger               = 0
    var TRIAL_reactionTrigger_ts            = 0
    var TRIAL_RT                            = 0
    var TRIAL_outcome                       = 0
    var TRIAL_type                          = 0
    var TRIAL_align                         = 0
}

group TMP {
    var pi                                  = 3.14159265359
    var TMP_dice 							= 0
	var TMP_RDPdir 							= 0
	var TMP_normJoyDir   					= 0
    var TMP_juice_ml                        = 0
 	var TMP_Feedback						= 0
 	var TMP_accuracy 						= 0
    var TMP_feedback_size                   = 0
    var TMP_score                           = 0 {
        TMP_feedback_size                   = TMP_score*2
	}
    var fixationPoint_posY                  = 0
    var fixationPoint_posX                  = 0 
    var cnt                                 = 0
    var lst_value                           = 0
}

group ML {
    var ML_sync                             = 0
}

group RDP {
    var RDP_direction                       = 0 {
		// Restrict to circular space [0:359]
		TMP_RDPdir 							= (RDP_direction + 360) % 360
    }
    var RDP_radius                          = 10
    var RDP_y                               = 0
    var RDP_x                               = 0
    var RDP_density                         = 2.5
    var RDP_dotsize                         = .1
    var RDP_speed                           = 10
    var RDP_coherence                       = 0
    var RDP_lifetime                        = 200
    var RDP_alpha                        	= 1
}

group COL {
    var COL_bg_r                            = 0
    var COL_bg_g                            = 0
    var COL_bg_b                            = 0
    var COL_rdp_r                           = 1
    var COL_rdp_g                           = 1
    var COL_rdp_b                           = 1
    var COL_start_area_r                    = 0
    var COL_start_area_g                    = 0
    var COL_start_area_b                    = 0
    var COL_cursor_r                        = 1
    var COL_cursor_g                        = 1
    var COL_cursor_b                        = 1
    var COL_arc_r                           = 1
    var COL_arc_g                           = 0
    var COL_arc_b                           = 0
    var COL_target_r                        = 1
    var COL_target_g                        = 1
    var COL_target_b                        = 1
    var COL_feedback_r                      = 1
    var COL_feedback_g                      = 0
    var COL_feedback_b                      = 0
    var COL_fix_r                           = 1
    var COL_fix_g                           = 1
    var COL_fix_b                           = 1
}

/*  group LIST_UPDATE {
    var LIST_sample_count                   = 0 (logging = never)
    var LIST_dir_loop_count                 = 0 (logging = never)
    var LIST_dir_idx                        = 0 (logging = never)
    var LIST_prev_dir_idx                   = 0 (logging = never)
    var LIST_dir_samples                    = 100
    var LIST_dir_criterion                  = 10 // deg
    var LIST_dir_sum                        = 0 (logging = never) 
    var LIST_abort_flag                     = 0
    var LIST_step_size                      = 10 
    var LIST_dir_diff                       = [0] (logging = never) 
    var LIST_dir_bool                       = [0] (logging = never) 
    var LIST_dir_change                     = [0] (logging = never) {
        // Check every Nth sample to reduce processing
        if ((LIST_sample_count % 10) == 0) {
        // Basic change point detection 
            // Reset flag
            LIST_dir_loop_count                     = 0        

            // Between-sample (angular) difference
            while(LIST_dir_loop_count < size(LIST_dir_change)-2) {
                LIST_dir_diff[LIST_dir_loop_count]  = abs(((LIST_dir_change[LIST_dir_loop_count] - LIST_dir_change[LIST_dir_loop_count+1] + 180) % 360) - 180) 
                LIST_dir_loop_count                 += 1
            }

            // Reset variables
            LIST_dir_loop_count                     = 0
            LIST_dir_sum                            = 0

            // Check difference values: IF larger than criterion -> true
            while(LIST_dir_loop_count < size(LIST_dir_diff)-1) {
                LIST_dir_bool[LIST_dir_loop_count]  = LIST_dir_diff[LIST_dir_loop_count] > LIST_dir_criterion
                LIST_dir_sum                        = (LIST_dir_bool[LIST_dir_loop_count] == true) + LIST_dir_sum
                LIST_dir_loop_count                 += 1

            }

            // Set flag to 1 to abort trial if no above-threshold change detected during time window
            if (LIST_dir_sum == 0 && LIST_abort_flag == 0 && LIST_sample_count > LIST_dir_samples) {
                LIST_abort_flag                     = 1
            }
        }
    }
}*/

group EYE { // CHANGE VARIABLE NAMES
    var EYE_rightX_raw                      = (float)(0)(persistant = YES)
    var EYE_rightY_raw                      = (float)(0)(persistant = YES)
    var EYE_leftX_raw                       = (float)(0)(persistant = YES)
    var EYE_leftY_raw                       = (float)(0)(persistant = YES)
    var EYE_x_raw                           = (float)(0)(persistant = YES)
    var EYE_y_raw                           = (float)(0)(persistant = YES)
    var EYE_hrefRightX                      = (integer)(0)(persistant = YES)
    var EYE_hrefRightY                      = (integer)(0)(persistant = YES)
    var EYE_hrefLeftX                       = (integer)(0)(persistant = YES)
    var EYE_hrefLeftY                       = (integer)(0)(persistant = YES)
    var EYE_pupilRightX                     = (integer)(0)(persistant = YES)
    var EYE_pupilRightY                     = (integer)(0)(persistant = YES)
    var EYE_pupilLeftX                      = (integer)(0)(persistant = YES)
    var EYE_pupilLeftY                      = (integer)(0)(persistant = YES)
    var EYE_pupilRightSize                  = (integer)(0)(persistant = YES)
    var EYE_pupilLeftSize                   = (integer)(0)(persistant = YES)
    var EYE_sampleTime                      = (integer)0 (persistant = YES)
    var EYE_x_dva                           = (integer)0 (persistant = YES)
    var EYE_y_dva                           = (integer)0 (persistant = YES)
    var EYE_saccade                         = (integer)0 (persistant = YES)

    var local_posX                          = 0 (scope = local)
    var local_posY                          = 0 (scope = local)
}

group IO {
    var IO_fixation_flag                    = 0
    var IO_rewardA                          = 0
    var IO_arc_width                    	= 0
	var IO_arc_trigger_min               	= 0
    var IO_arc_trigger_max               	= 0  
	var IO_cursor_x                       	= 0
    var IO_cursor_y                       	= 0
    var IO_joystickX_raw                 	= 0 {
            IO_cursor_x                     = (((IO_joystickX_raw/511.5)-1) * CTRL_Xmax) + RDP_x
    }
    var IO_joystickY_raw                    = 0 {
            IO_cursor_y                     = (((IO_joystickY_raw/511.5)-1) * CTRL_Ymax) + RDP_y
    }
    var IO_joystickStrength                 = 0 {                     
  		if (TRIAL_start > TRIAL_end) {
            // Set arc width
            IO_arc_width                    = 180 - (180 * IO_joystickStrength) 

      		// Fix minimum arc size
            if (IO_arc_width < CTRL_target_deg) {
             	IO_arc_width                = CTRL_target_deg
          	} 

            // Target
            if (TRIAL_reactionTrigger == 0) {
            CTRL_target_idx                 = disc_rand(0,199) // Show target?
            }
        }
    }
    var IO_joystickDirection                = 0 {
    	if (TRIAL_start > TRIAL_end) {
            // Calculate tracking accuracy and reward
            TMP_normJoyDir                  = (int)(((int)IO_joystickDirection + (180-TMP_RDPdir) + 360) % 360) 
            TMP_accuracy                    = abs(1 - abs(TMP_RDPdir - IO_joystickDirection) / 180)
            TMP_score                       = IO_joystickStrength * TMP_accuracy
            TMP_juice_ml                    = TMP_score * CTRL_reward_ml
              
            // Cap reward at maximum
            if (IO_joystickStrength > 1) {
                TMP_juice_ml                = (1 * TMP_accuracy) * CTRL_reward_ml
            }
            TMP_Feedback                    = 360 * (TMP_juice_ml / CTRL_reward_ml) 

            /*// Keep track of joystick direction in preceeding time window
            LIST_prev_dir_idx               = LIST_dir_idx
            LIST_dir_idx                    = LIST_sample_count % LIST_dir_samples
            LIST_dir_change[LIST_dir_idx]   = TMP_normJoyDir 
            LIST_sample_count               += 1*/

            // Compute trigger boundaries & flag
            IO_arc_trigger_min              = (int)(((int)(TMP_RDPdir - (IO_arc_width/2) + 360) % 360) + ((180-TMP_RDPdir) + 360)) % 360
            IO_arc_trigger_max              = (int)(((int)(TMP_RDPdir + (IO_arc_width/2) + 360) % 360) + ((180-TMP_RDPdir) + 360)) % 360
            CTRL_arc_flag                   = (TMP_normJoyDir >= IO_arc_trigger_min) && (TMP_normJoyDir <= IO_arc_trigger_max)     
        }
    }
}

group Selection {
    selection SEL_snr (
        values                              = 0, .06, .08, .1067, .1423, .1897, .2530, .3374, .4499, .6
        selection                           = random_without_replacement
        nsamples                            = 1000
        sampling_method                     = cycles
        advance_on_accept                   = YES
        autoreset                           = YES
        )

    selection EYE_pos (
        values                              = 1:9
        selection                           = random_without_replacement
        nsamples                            = 1
        sampling_method                     = cycles
        advance_on_accept                   = YES
        autoreset                           = YES
    )
}

//
// Sounds
//

wav_file Acquire_sound ('./sounds/acquire.wav')
wav_file Failure_sound ('./sounds/failure2.wav')
wav_file Reward_sound ('./sounds/reward.wav')
wav_file Reward_sound_2 ('./sounds/reward_2.wav')
wav_file Reward_sound_3 ('./sounds/reward_3.wav')
wav_file SuperReward_sound ('./sounds/Power Up.wav')
wav_file End_sound ('./sounds/Defeat Bowser.wav')

//
// Stimuli
//

blank_screen Background (
    color                       			= COL_bg_r,COL_bg_g,COL_bg_b
    )

stimulus/advstimulus fixationPoint (
    trigger_width                           = CTRL_fixationWidth_dva
    trigger_watch_x                         = EYE_x_dva
    trigger_watch_y                         = EYE_y_dva
    trigger_flag                            = IO_fixation_flag
    x_size                                  = CTRL_fixationDotSize_dva
    y_size                                  = CTRL_fixationDotSize_dva
    x_position                              = fixationPoint_posX
    y_position                              = fixationPoint_posY
    shape                                   = format("circle")
    color                                   = COL_fix_r,COL_fix_g,COL_fix_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_fixation_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus fixationCross (
    trigger_width                           = CTRL_fixationWidth_dva
    trigger_watch_x                         = EYE_x_dva
    trigger_watch_y                         = EYE_y_dva
    trigger_flag                            = IO_fixation_flag
    x_size                                  = CTRL_fixationDotSize_dva
    y_size                                  = CTRL_fixationDotSize_dva
    x_position                              = RDP_x
    y_position                              = RDP_y
    shape                                   = format("cross")
    color                                   = COL_fix_r,COL_fix_g,COL_fix_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_fixation_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus cursor (
    trigger_width                           = 0
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = 0
    x_size                                  = CTRL_cursor_radius * 2
    y_size                                  = CTRL_cursor_radius * 2
    x_position                              = IO_cursor_x
    y_position                              = IO_cursor_y
    shape                                   = format("circle")
    color                                   = COL_cursor_r,COL_cursor_g,COL_cursor_b
    rotation                                = 0
    alpha_multiplier                        = 1
    version                                 = 1
    autoplay                                = YES
    )

stimulus/r_d_p RDP (
    radius                      			= RDP_radius
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    dot_density                 			= RDP_density
    dot_size                    			= RDP_dotsize
    color                       			= COL_rdp_r,COL_rdp_g,COL_rdp_b
    alpha_multiplier            			= RDP_alpha
    direction                   			= RDP_direction
    speed                       			= RDP_speed
    coherence                   			= RDP_coherence
    lifetime                    			= RDP_lifetime
    announce_dots               			= NO
    autoplay                    			= YES
    )

stimulus/advstimulus start_area (
    trigger_width               			= CTRL_start_area_size
    trigger_watch_x             			= IO_cursor_x   
    trigger_watch_y             			= IO_cursor_y   
    trigger_flag                			= CTRL_start_area_flag
    x_size                      			= CTRL_start_area_size
    y_size                      			= CTRL_start_area_size
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    shape                       			= format("circle")
    color                       			= COL_start_area_r,COL_start_area_g,COL_start_area_b
    rotation                    			= 0
    alpha_multiplier            			= CTRL_start_area_alpha
    version                     			= 1
    autoplay                    			= YES
    )

stimulus/advstimulus arc (
    trigger_width               			= CTRL_arc_size
    trigger_watch_x             			= 0
    trigger_watch_y             			= 0
    trigger_flag                			= CTRL_arc_flag
    x_size                      			= CTRL_arc_size
    y_size                      			= CTRL_arc_size
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    shape                       			= format("circle %d", (integer)IO_arc_width)    
    color                       			= COL_arc_r,COL_arc_g,COL_arc_b
    rotation                    			= -IO_joystickDirection + (IO_arc_width/2)
    alpha_multiplier            			= CTRL_arc_alpha
    version                     			= 1
    autoplay                    			= YES
    )

stimulus/advstimulus arcMask (
    trigger_width                           = 0
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = 0
    x_size                                  = CTRL_arc_size - (CTRL_arc_size/5)
    y_size                                  = CTRL_arc_size - (CTRL_arc_size/5)
    x_position                              = RDP_x
    y_position                              = RDP_y
    shape                                   = format("circle %d", (integer)360)    
    color                                   = COL_start_area_r,COL_start_area_g,COL_start_area_b
    rotation                                = -IO_joystickDirection + (IO_arc_width/2)
    alpha_multiplier                        = 1
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus indicator (
    trigger_width               			= 0
    trigger_watch_x             			= 0
    trigger_watch_y             			= 0
    trigger_flag                			= 0
    x_size                      			= CTRL_indicator_size
    y_size                      			= CTRL_indicator_size
    x_position                  			= (sin((IO_joystickDirection)*(pi/180)) * CTRL_indicator_offset) + RDP_x
    y_position                  			= (cos((IO_joystickDirection)*(pi/180)) * CTRL_indicator_offset) + RDP_y
    shape                       			= format("symmetric 3")
    color                       			= COL_arc_r,COL_arc_g,COL_arc_b
    rotation                    			= -IO_joystickDirection
    alpha_multiplier            			= CTRL_indicator_alpha
    version                     			= 1
    autoplay                    			= YES
    )

stimulus/advstimulus target (
    trigger_width               			= CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                			= CTRL_target_flag
    x_size                      			= CTRL_target_size
    y_size                      			= CTRL_target_size
    x_position                  			= CTRL_target_x
    y_position                  			= CTRL_target_y
    shape                       			= format("circle")
    color                       			= COL_target_r,COL_target_g,COL_target_b
    rotation                    			= 0
    alpha_multiplier            			= CTRL_target_alpha
    version                     			= 1
    autoplay                    			= YES
    )

stimulus/advstimulus target2 (
    trigger_width                           = CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                            = CTRL_target2_flag
    x_size                                  = CTRL_target_size
    y_size                                  = CTRL_target_size
    x_position                              = CTRL_target2_x
    y_position                              = CTRL_target2_y
    shape                                   = format("circle")
    color                                   = COL_target_r,COL_target_g,COL_target_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_target_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus target3 (
    trigger_width                           = CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                            = CTRL_target3_flag
    x_size                                  = CTRL_target_size
    y_size                                  = CTRL_target_size
    x_position                              = CTRL_target3_x
    y_position                              = CTRL_target3_y
    shape                                   = format("circle")
    color                                   = COL_target_r,COL_target_g,COL_target_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_target_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus target4 (
    trigger_width                           = CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                            = CTRL_target4_flag
    x_size                                  = CTRL_target_size
    y_size                                  = CTRL_target_size
    x_position                              = CTRL_target4_x
    y_position                              = CTRL_target4_y
    shape                                   = format("circle")
    color                                   = COL_target_r,COL_target_g,COL_target_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_target_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus feedback (
    trigger_width               			= 0
    trigger_watch_x             			= 0
    trigger_watch_y             			= 0
    trigger_flag                			= 0
    x_size                      			= TMP_feedback_size
    y_size                      			= TMP_feedback_size
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    shape                       			= format("circle %d", (integer)360)
    color                       			= COL_feedback_r,COL_feedback_g,COL_feedback_b
    rotation                    			= 0
    alpha_multiplier            			= CTRL_feedback_alpha
    version                     			= 1
    autoplay                    			= YES
    )


//
// Filters
//

//
// Optimizers
//

//
// Resources
//

//
// Protocols
//

protocol 'Calibration-9p' {
    report ('******** STARTING CALIBRATION ********')
    start_device_io (Eyelink)
    clear_calibration (EyeCalibrator)
    
    CTRL_reward_ml                      = .2
    cnt                                 = 0
    CTRL_ITI_ms                         = 1000
    CTRL_fixation_duration_ms           = 1000

    trial {
        task 'Calibration System' {

            state BEGIN_STATE_SYSTEM {
                lst_value               = EYE_pos
                fixationPoint_posX      = ((lst_value % 3) - 1) * 5
                fixationPoint_posY      = (floor((lst_value-1)/3) - 1) * 5

                report ('Calibration Trial; Fixation point at x= $fixationPoint_posX , y= $fixationPoint_posY , fixation width = $CTRL_fixationWidth_dva')

                goto (SHOW_CALIBRATION_POINT)
            }
            
            state SHOW_CALIBRATION_POINT {
                live_queue_stimulus (fixationPoint)
                report ($IO_fixation_flag)
                report ('Calibration Trial; Fixation point at x= $fixationPoint_posX , y= $fixationPoint_posY , fixation width = $CTRL_fixationWidth_dva')
                update_stimulus_display ()

                goto (
                    target              = PRE_AQUIRE
                    when                = IO_fixation_flag
                    )
            }
            
            state PRE_AQUIRE {
                report ('Pre Fixation Time ...')
                report ($IO_fixation_flag)

                start_timer (
                    timer               = PreAquireTimer
                    duration            = 250
                    duration_units      = ms
                    )

                goto (
                    target              = SHOW_CALIBRATION_POINT
                    when                = NOT( IO_fixation_flag )
                    )
                timer_expired (
                    target              = CALIBRATION_AQUIRE
                    timer               = PreAquireTimer
                    )
            }
            
            state CALIBRATION_AQUIRE {
                play_sound (Acquire_sound)
                start_timer (
                    timer               = fixation_timer
                    duration            = CTRL_fixation_duration_ms
                    duration_units      = ms
                    )

                begin_calibration_average (EyeCalibrator)
                report ('====== GETTING SAMPLES ======')

                goto (
                    target              = FIXATION_BREAK
                    when                = NOT( IO_fixation_flag )
                    )
                timer_expired (
                    target              = ACCEPT_SAMPLES
                    timer               = fixation_timer
                    )
            }
            
            state ACCEPT_SAMPLES {
                end_calibration_average_and_take_sample (
                    calibrator          = EyeCalibrator
                    calibratable_object = fixationPoint
                    )
                
                cnt                     += 1
                IO_rewardA              = CTRL_reward_ml
                INFO_HitCounter         = INFO_HitCounter + 1

                play_sound (Reward_sound)
                dequeue_stimulus (fixationPoint)
                update_stimulus_display ()
                accept_selections (EYE_pos)
                report ('Fixation Maintained -- Trial Accepted !!!')

                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                goto (
                    when                = cnt >= 9
                    target              = EXIT_STATE_SYSTEM
                    )
                goto ('PAUSE')

            }
            
            state FIXATION_BREAK {
                play_sound (Failure_sound)
                end_calibration_average_and_ignore (EyeCalibrator)
                dequeue_stimulus (fixationPoint)
                update_stimulus_display ()
                reject_selections (EYE_pos)
                report ('Fixation Lost -- Trial Rejected.')

                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                goto (
                    when                = cnt >= 9
                    target              = EXIT_STATE_SYSTEM
                    )  

                goto ('PAUSE')
            }

            state PAUSE {
                goto (
                    target              = 'BEGIN_STATE_SYSTEM'
                    when                = timer_expired(ITI_Timer)
                    )
            }
            
            state EXIT_STATE_SYSTEM {
                reset_selection (EYE_pos)
                report ('Starting ITI of 1000 ms')
                wait (
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )
                yield ()
            }
        }            
    }
    update_calibration (EyeCalibrator)
    update_stimulus_display ()
    stop_device_io (Eyelink)
}

protocol 'Pre-test SNR' {
    start_device_io (mIO)
    start_device_io (Eyelink)
    live_queue_stimulus (Background)
    live_queue_stimulus (cursor)
    update_stimulus_display ()
        
    CTRL_reward_ml                      = .2
    CTRL_NoTargets                  	= 400
    CTRL_PreSNR_StimDuration            = 1000
    CTRL_start_area_size                = 4 
    CTRL_start_area_alpha               = 1
    CTRL_target_size                    = 3
    CTRL_target_alpha                   = .5
    CTRL_ITI_ms                         = 1000
    INFO_HitCounter                     = 0
    INFO_ErrorCounter                   = 0
    TRIAL_start                         = 0
    TRIAL_end                           = 0
    CTRL_fixationWidth_dva              = CTRL_start_area_size+1

    trial 'Main Task System' {
        task LOOP {
            state 'Wait for Joystick Reset' {
                live_queue_stimulus (start_area)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()

                goto (
                    target              = 'New Trial'
                    when                = CTRL_start_area_flag //&& IO_fixation_flag
                    )
                goto (
                    target              = 'Wait for Joystick Reset'
                    when                = CTRL_start_area_flag == 0
                    )
            }

            state 'New Trial' {        
                ML_sync                 = 1
                TRIAL_start             = TRIAL_start + 1
                TRIAL_align             = 1
                INFO_task               = "pre-test_SNR"

                RDP_direction           = disc_rand(0,359)
                RDP_coherence           = SEL_snr
                TRIAL_type              = format("Dir%d", (integer)RDP_direction, " Coh%d", (float)RDP_coherence)


                live_queue_stimulus (RDP)
                live_queue_stimulus (start_area)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()

                start_timer (
                    timer               = RDP_Timer
                    duration            = CTRL_PreSNR_StimDuration
                    duration_units      = ms
                    )

                report ('===== TRIAL $TRIAL_start START =====')
                report ('Coherence: $RDP_coherence')

                goto ('Update Stimulus')
            }

            state 'Update Stimulus' {
                goto (
                    target              = 'False Alarm'
                    when                = CTRL_start_area_flag == 0
                    )
                //goto (
                    //target              = 'Fixation Break'
                    //when                = IO_fixation_flag == 0
                    //)
                goto (
                    target              = 'Show Target'
                    when                = timer_expired(RDP_Timer)
                    )
            }

            state 'Show Target' {
                // Calculate target coordinates
                CTRL_target_x           = sin((RDP_direction)*(pi/180)) * CTRL_target_offset
                CTRL_target_y           = cos((RDP_direction)*(pi/180)) * CTRL_target_offset
                
                CTRL_target2_x          = sin((RDP_direction+90)*(pi/180)) * CTRL_target_offset
                CTRL_target2_y          = cos((RDP_direction+90)*(pi/180)) * CTRL_target_offset
                
                CTRL_target3_x          = sin((RDP_direction+180)*(pi/180)) * CTRL_target_offset
                CTRL_target3_y          = cos((RDP_direction+180)*(pi/180)) * CTRL_target_offset
                
                CTRL_target4_x          = sin((RDP_direction+270)*(pi/180)) * CTRL_target_offset
                CTRL_target4_y          = cos((RDP_direction+270)*(pi/180)) * CTRL_target_offset

                report ('-- Show Targets --')
                dequeue_stimulus (start_area)
                dequeue_stimulus (RDP)
                live_queue_stimulus (target)
                live_queue_stimulus (target2)
                live_queue_stimulus (target3)
                live_queue_stimulus (target4)
                live_queue_stimulus (cursor)
                update_stimulus_display ()

                TRIAL_reactionTrigger   = 1

                goto ('Response Window')
            }

            state 'Response Window' {
                goto (
                    target              = Hit
                    when                = CTRL_target_flag 
                    )
                goto (
                    target              = Error
                    when                = CTRL_target2_flag || CTRL_target3_flag || CTRL_target4_flag
                    )
            }

            state Hit {
                TRIAL_reactionEvent     = 1
                TRIAL_outcome           = "hit"
                INFO_HitCounter         = INFO_HitCounter + 1
                                            
                play_sound (Acquire_sound)
                IO_rewardA              = CTRL_reward_ml

                accept_selections (SEL_snr)
                report ('-- Outcome: hit --')
                goto ('End Trial')
            }

            state Error {
                TRIAL_outcome           = "wrong"
                INFO_ErrorCounter       = INFO_ErrorCounter + 1

                play_sound (Acquire_sound)
                accept_selections (SEL_snr)
                report ('-- Outcome: wrong --')
                goto ('End Trial')
            }

            state 'False Alarm' {
                TRIAL_reactionEvent     = 1
                TRIAL_outcome           = "early"
               
                play_sound (Failure_sound)
                reject_selections(SEL_snr)
                report ('-- Outcome: early --')
                goto ('End Trial')
            }

            state 'Fixation Break' {
                TRIAL_reactionEvent     = 1
                TRIAL_outcome           = "brokeFixation"

                play_sound (Failure_sound)
                reject_selections(SEL_snr)
                report ('-- Outcome: brokeFixation --')
                goto ('End Trial')
            }

            state 'End Trial' {
                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                dequeue_stimulus (target)
                dequeue_stimulus (target2)
                dequeue_stimulus (target3)
                dequeue_stimulus (target4)
                dequeue_stimulus (start_area)
                dequeue_stimulus (fixationCross)
                dequeue_stimulus (RDP)
                update_stimulus_display ()

                TRIAL_reactionTrigger   = 0
                TRIAL_reactionEvent     = 0
                ML_sync                 = 0
                TRIAL_align             = 0
                TRIAL_end               = TRIAL_start

                report ('==== END OF TRIAL $TRIAL_end ====')

                goto (
                    target              = 'End paradigm'
                    when                = (INFO_HitCounter + INFO_ErrorCounter) >= CTRL_NoTargets
                    )
                goto ('ITI')
            }

            state 'ITI' {
                timer_expired (
                    target              = 'Wait for Joystick Reset'
                    timer               = ITI_Timer
                    )
            }

            state 'End paradigm' {
                report ('==== $INFO_HitCounter CORRECT COINS COLLECTED ====')
                report ('==== $INFO_ErrorCounter WRONG COINS COLLECTED ====')
                report ('==== ENDING PARADIGM ====')
                play_sound (End_sound)
                yield ()
            }
        }
    }
    stop_device_io (Eyelink)
}

protocol 'Pre-test RT' {
    start_device_io (mIO)
    live_queue_stimulus (Background)
    live_queue_stimulus (cursor)
        
    CTRL_reward_ml                      = .1
    CTRL_NoTargets                  	= 300
    CTRL_PreRT_ResponseWindow           = 5000
    CTRL_target_size                    = 6
    CTRL_target_alpha                   = .5
    CTRL_start_area_size                = 3 
    CTRL_start_area_alpha               = .3
    CTRL_ITI_ms                         = 1000
    INFO_HitCounter                     = 0
    INFO_ErrorCounter                   = 0
    TRIAL_start                         = 0
    TRIAL_end                           = 0
    COL_start_area_r                    = 1
    COL_start_area_g                    = 1
    COL_start_area_b                    = 1
    
    update_stimulus_display ()

    trial 'Main Task System' {
        task LOOP {
            state 'Wait for Joystick Reset' {
                live_queue_stimulus (start_area)
                update_stimulus_display ()
                
                goto (
                    target              = 'New Trial'
                    when                = CTRL_start_area_flag
                    )
                goto (
                    target              = 'Wait for Joystick Reset'
                    when                = CTRL_start_area_flag == 0
                    )
            }

            state 'New Trial' {
                ML_sync                 = 1
                TRIAL_start             = TRIAL_start + 1
                TRIAL_align             = 1
                INFO_task               = "pre-test_RT"

                start_timer (
                    timer               = TargetTimer
                    duration            = disc_rand(200,500)
                    duration_units      = ms
                    )

                report ('===== TRIAL $TRIAL_start START =====')
                goto ('Wait for Target')
            }

            state 'Wait for Target' {
                goto (
                    target              = 'False Alarm'
                    when                = timer_expired(TargetTimer) == false && CTRL_start_area_flag == false
                    )                
                goto (
                    target              = 'Show Target'
                    when                = timer_expired(TargetTimer)
                    )
            }

            state 'Show Target' {
                report ('-- Show Target --')
                CTRL_target_direction   = disc_rand(0,359)
                CTRL_target_x           = sin((CTRL_target_direction)*(pi/180)) * (3 + (CTRL_target_size/2))
                CTRL_target_y           = cos((CTRL_target_direction)*(pi/180)) * (3 + (CTRL_target_size/2))
                TRIAL_type              = format("Dir%d", (integer)CTRL_target_direction)

                dequeue_stimulus (start_area)
                live_queue_stimulus (target)
                update_stimulus_display ()

                TRIAL_reactionTrigger       = 1
                TRIAL_reactionTrigger_ts    = now()

                start_timer (
                    timer               = ResponseTimer
                    duration            = CTRL_PreRT_ResponseWindow
                    duration_units      = ms
                    )

                update_stimulus_display ()
                goto ('Response Window')
            }

            state 'Response Window' {
                goto (
                    target              = 'Hit'
                    when                = CTRL_target_flag == true
                    //when                = CTRL_start_area_flag == false
                    )
                timer_expired (
                    target              = 'Miss'
                    timer               = ResponseTimer
                    )
            }

            state 'Hit' {
                TRIAL_reactionEvent     = 1
                TRIAL_reactionEvent_ts  = now()
                TRIAL_RT                = (TRIAL_reactionEvent_ts - TRIAL_reactionTrigger_ts)/1000
                TRIAL_outcome           = "hit"
                INFO_HitCounter         = INFO_HitCounter + 1
                
                if (TRIAL_RT < 500) {
                	IO_rewardA         	= CTRL_reward_ml+.2
                }

                if (TRIAL_RT >= 500 && TRIAL_RT < 750) {
                	IO_rewardA         	= CTRL_reward_ml+.1
                }
                
                if (TRIAL_RT >= 750 && TRIAL_RT < 3000) {
                	IO_rewardA         	= CTRL_reward_ml
                }
                
                //IO_rewardA         		= CTRL_reward_ml
                play_sound (Reward_sound)                
                report ('-- Outcome: Hit --')
                report ('RT: $TRIAL_RT')
                report ('REW: $IO_rewardA')

                goto ('End Trial')
            }

            state 'Miss' {
                TRIAL_outcome           = "miss"
                TRIAL_RT                = 0

                play_sound (Failure_sound)
                report ('-- Outcome: Miss --')
                goto ('End Trial')
            }

            state 'False Alarm' {
                TRIAL_reactionEvent     = 1
                TRIAL_outcome           = "false alarm"
                TRIAL_RT                = 0

                play_sound (Failure_sound)
                report ('-- Outcome: False alarm --')
                goto ('End Trial')
            }

            state 'End Trial' {
                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                dequeue_stimulus (target)
                dequeue_stimulus (start_area)
                update_stimulus_display ()

                TRIAL_reactionTrigger   = 0
                TRIAL_reactionEvent     = 0
                TRIAL_align             = 0
                TRIAL_end               = TRIAL_start
                ML_sync                 = 0
                
                report ('==== END OF TRIAL $TRIAL_end ====')
                goto (
                    target              = 'End paradigm'
                    when                = INFO_HitCounter >= CTRL_NoTargets
                    )
                goto ('ITI')
            }

            state 'ITI' {
                timer_expired (
                    target              = 'Wait for Joystick Reset'
                    timer               = ITI_Timer
                    )
            }

            state 'End paradigm' {
                report ('==== $INFO_HitCounter COINS COLLECTED ====')
                report ('==== ENDING PARADIGM ====')
                play_sound (End_sound)
                yield ()
            }
        }
    }
}

protocol 'CPR_solo' {
    report ('Hello! Starting Experiment...')
    start_device_io (mIO)
    start_device_io (Eyelink)
    live_queue_stimulus (Background)
    update_stimulus_display ()

    // Set desired parameters
    CTRL_reward_ml                              = .5
    CTRL_NoTargets                              = 100000
    CTRL_NoSteadyStates                         = 50
    CTRL_NoCoherenceStates                      = 10 
    CTRL_steadyState_min_ms                     = 1250 
    CTRL_steadyState_max_ms                     = 2500
    CTRL_cpr_treshold                           = .2
    CTRL_arc_alpha                              = 1
    CTRL_arc_size                               = 4.75
    CTRL_indicator_size                         = .3
    CTRL_indicator_offset                       = CTRL_arc_size/1.95
    CTRL_start_area_size                        = 5 
    CTRL_start_area_alpha                       = 1
    CTRL_target_size                            = .8
    CTRL_target_alpha                           = 1
    CTRL_target_deg                             = 2 * (asin( (CTRL_target_size/2) / ((CTRL_start_area_size/2) + (CTRL_target_size/2)) ) * (180/pi))
    CTRL_target_duration_ms                 	= 50
    CTRL_target_ITI_ms                          = 500
    CTRL_target_ban_duration_ms                 = 300
    CTRL_ITI_ms                                 = 1000
    TRIAL_start                                 = 0
    TRIAL_end                                   = 0

    // Reset counters
    TRIAL_start                                 = 0
    TRIAL_end                                   = 0
    INFO_SteadyStateCounter                     = 0
    INFO_CoherenceStateCounter                  = 0
    INFO_TargetCounter                          = 0
    INFO_HitCounter                             = 0
    INFO_ErrorCounter                           = 0
    INFO_Juice_ml                              	= 0

    trial 'Trial Structure' {
        task LOOP {

            state 'Wait for Joystick Reset' {
		
                goto (
                    target                      = 'Wait for Joystick Movement'
                    when                        = (IO_joystickStrength <= CTRL_cpr_treshold) 
                    )
            }
            
            state 'Wait for Joystick Movement' {
                live_queue_stimulus (start_area)
                update_stimulus_display ()

				COL_start_area_r 				= 1
				COL_start_area_g 				= 1
				COL_start_area_b 				= 1
				
                goto (
                    target                      = 'New Trial'
                    when                        = (IO_joystickStrength > CTRL_cpr_treshold) 
                    )
            }

            state 'New Trial' { 
            	COL_start_area_r 				= 0
				COL_start_area_g 				= 0
				COL_start_area_b 				= 0
                TRIAL_start                   	+= 1
                TRIAL_align                     = 1
                ML_sync                         = 1
                INFO_SteadyStateCounter         = 0
                INFO_CoherenceStateCounter      = 0
                INFO_task                       = "CPR_solo_stepfunction_neutral"

                // Initial trial specs
                RDP_direction                   = disc_rand(0,359)
                RDP_coherence                   = CTRL_snr_list[disc_rand(0,size(CTRL_snr_list)-1)]

          		// Start with easiest condition
                if (TRIAL_start == 1) {
                    RDP_coherence               = CTRL_snr_list[size(CTRL_snr_list)-1]
                }

                report ('===== TRIAL $TRIAL_start STARTS =====')
                goto ('Show Stimuli')
            }

            state 'Show Stimuli' {
                live_queue_stimulus (RDP)
                live_queue_stimulus (start_area)
                live_queue_stimulus (arc)
                live_queue_stimulus (arcMask)
                live_queue_stimulus (indicator)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()   

                goto ('Dequeue Target')
            }

            state 'Dequeue Target' {
                //Remove existing targets from screen
                dequeue_stimulus (target)
                dequeue_stimulus (feedback)
                update_stimulus_display ()
                
                // Reset flag
                TRIAL_reactionTrigger           = 0
                CTRL_hit_flag                   = 0
                CTRL_miss_flag                  = 0

                goto ('Check Counters')

            }

            state 'Check Counters' {
                goto (
                    target                      = 'End Trial'
                    when                        = (INFO_SteadyStateCounter >= CTRL_NoSteadyStates) || (INFO_TargetCounter >= CTRL_NoTargets)
                    )
                goto (
                    target                      = 'Update Stimuli'
                    when                        =  timer_expired(SteadyStateDurationTimer) == 0
                    )
                goto (
                    target                      = 'Set up steady state'
                    when                        =  timer_expired(SteadyStateDurationTimer) 
                    )
            }

            state 'Set up steady state' {
            	// Sync Matlab & reset flags
                ML_sync                         = 0
                ML_sync                         = 1

                // Draw state parameters
                CTRL_SteadyStateDuration_ms     = disc_rand(CTRL_steadyState_min_ms,CTRL_steadyState_max_ms) // Duration of state
                CTRL_change_mangitude           = CTRL_directionChange_list[disc_rand(0,size(CTRL_directionChange_list)-1)] // Magnitude of RDP direction change
                TMP_dice                        = disc_rand(0,1) // Clockwise vs Counter-clockwise RDP direction change
                INFO_SteadyStateCounter         += 1

                // Change RDP coherence after N states
                if (INFO_CoherenceStateCounter >= CTRL_NoCoherenceStates) {
                    INFO_CoherenceStateCounter  = 0
                    RDP_coherence               = CTRL_snr_list[disc_rand(0,size(CTRL_snr_list)-1)]
                }
                
                // Keep track of number of states with same coherence level
                INFO_CoherenceStateCounter      = INFO_CoherenceStateCounter + 1
                TRIAL_type                      = format("Coh%d", (float)RDP_coherence)

                if (INFO_SteadyStateCounter > 1) {
                    // Draw change direction
                    TMP_dice                    = disc_rand(0,1)

                    // Draw magnitude of change
                    if (TMP_dice == 1) {
                        RDP_direction           = RDP_direction + CTRL_change_mangitude
                    }

                    if (TMP_dice == 0) {
                        RDP_direction           = RDP_direction - CTRL_change_mangitude
                    }
                }

                start_timer (
                    timer                       = SteadyStateDurationTimer
                    duration                    = CTRL_SteadyStateDuration_ms
                    duration_units              = ms
                    )

                // Block target appearance in time window after state onset
                start_timer (
                    timer                       = NoTargetTimer_StateOnset
                    duration                    = CTRL_target_ban_duration_ms
                    duration_units              = ms
                    )

                report ('--- Steady state $INFO_SteadyStateCounter ---')
                          
                goto ('Update Stimuli')
            }


			state 'Update Stimuli' { 
                /*goto (                    
                    target                      = 'Fixation break detected'
                    when                        = (IO_fixation_flag == 0 && CTRL_fixation_break_flag == 0) 
                    )
                goto (                    
                    target                      = 'Reset CTRL_fixation_break_flag'
                    when                        = (IO_fixation_flag && CTRL_fixation_break_flag && timer_expired(MinFixationBreakTimer) == 0) 
                    )                
                goto (                    
                    target                      = 'Fixation break penalty'
                    when                        = (IO_fixation_flag == 0 && timer_expired(MinFixationBreakTimer) && CTRL_fixation_break_flag && CTRL_fixation_penalty_flag == 0)
                    )
                goto (                    
                    target                      = 'Fixation restored'
                    when                        = (IO_fixation_flag && timer_expired(FixBreakPenaltyTimer) && CTRL_fixation_break_flag) 
                    )*/
                goto (
                    target                      = 'Dequeue Target'
                    when                        = CTRL_hit_flag && timer_expired(FeedbackTimer) && TRIAL_reactionTrigger
                    )
                goto (
                    target                      = 'Target presentation'
                    when                        = CTRL_target_idx == 0 && TRIAL_reactionTrigger == 0 && timer_expired(NoTargetTimer) && timer_expired(NoTargetTimer_StateOnset)
                    ) 
                goto (
                    target                      = 'Hit'
                    when                        = CTRL_arc_flag && TRIAL_reactionTrigger && (CTRL_hit_flag + CTRL_miss_flag) == 0 && timer_expired(TargetDurationTimer) == 0
                    )  
                goto (
                    target                      = 'Miss'
                    when                        = timer_expired(TargetDurationTimer) && TRIAL_reactionTrigger && (CTRL_hit_flag + CTRL_miss_flag) == 0
                    )              
                goto (
                    target                      = 'Check Counters'
                    when                        = timer_expired(SteadyStateDurationTimer) && TRIAL_reactionTrigger == 0
                    )
            }

            /*state 'Fixation break detected' {
                CTRL_fixation_break_flag        = 1

                start_timer (
                    timer                       = MinFixationBreakTimer
                    duration                    = CTRL_minFixBreak_duration_ms
                    duration_units              = ms
                    )
                    
                report ('FIX BREAK')
                
                goto ('Update Stimuli')
            }

            state 'Reset CTRL_fixation_break_flag' {
                    CTRL_fixation_break_flag        = 0
                    report ('FIX RESET')
                    goto ('Update Stimuli')
            }

            state 'Fixation break penalty' {
                CTRL_fixation_size              = .75
                COL_fix_r                       = 1
                COL_fix_b                       = 0
                COL_fix_g                       = 0
                CTRL_arc_alpha                  = 0
                CTRL_indicator_alpha            = 0
                CTRL_fixation_penalty_flag      = 1

                start_timer (
                    timer                       = FixBreakPenaltyTimer
                    duration                    = CTRL_fixBreak_penalty_duration_ms
                    duration_units              = ms
                    )
                
                report ('FIX PENALTY')
                
                goto ('Update Stimuli')
            }

            state 'Fixation restored' {
                CTRL_fixation_size              = .3
                COL_fix_r                       = 1
                COL_fix_b                       = 1
                COL_fix_g                       = 1
                CTRL_arc_alpha                  = 1
                CTRL_indicator_alpha            = 1
                CTRL_fixation_break_flag        = 0
                CTRL_fixation_penalty_flag      = 0

                report ('FIX RESTORED')

                goto ('Update Stimuli')
            }*/

       		state 'Target presentation' {
            	// Target coordinates according to RDP direction
                CTRL_target_x                   = (sin((RDP_direction)*(pi/180)) * ((CTRL_start_area_size/2.4))) + RDP_x
                CTRL_target_y                   = (cos((RDP_direction)*(pi/180)) * ((CTRL_start_area_size/2.4))) + RDP_y

                live_queue_stimulus (target)
                update_stimulus_display ()

                TRIAL_reactionTrigger           = 1
                INFO_TargetCounter              = INFO_TargetCounter + 1

                start_timer (
                    timer                       = TargetDurationTimer
                    duration                    = CTRL_target_duration_ms
                    duration_units              = ms
                    )

                // Block target appearance
                start_timer (
                    timer                       = NoTargetTimer
                    duration                    = (CTRL_target_duration_ms + CTRL_target_ITI_ms)
                    duration_units              = ms
                    )

                report ('--- SHOW TARGET $INFO_TargetCounter ---')
                goto ('Update Stimuli')
            }

            state 'Hit' {
            	// Auditory feedback
            	if (TMP_juice_ml > (CTRL_reward_ml*.95)) {
            		play_sound (SuperReward_sound)
            	}

                if (TMP_juice_ml > (CTRL_reward_ml*.75) && TMP_juice_ml <= (CTRL_reward_ml*.95)) {
                    play_sound (Reward_sound_3)
                }

                if (TMP_juice_ml > (CTRL_reward_ml*.5) && TMP_juice_ml <= (CTRL_reward_ml*.75)) {
                    play_sound (Reward_sound_2)
                }

            	if (TMP_juice_ml <= (CTRL_reward_ml*.5)) {
            		play_sound (Reward_sound)
            	}

				//Visual feedback
                queue_stimulus (feedback)
                queue_stimulus (fixationCross)
                update_stimulus_display ()

               	// Set flags and add to counters
                TRIAL_outcome                   = "hit"
                CTRL_hit_flag                   = 1
                INFO_HitCounter                 = INFO_HitCounter + 1

                report ('--- OUTCOME: Hit ---')

                start_timer (
                    timer                       = FeedbackTimer
                    duration                    = CTRL_feedback_ms
                    duration_units              = ms
                    )

                goto ('Give reward')
            }
    
            state 'Give reward' {
                report ('REW: $TMP_juice_ml')
                INFO_Juice_ml                   += TMP_juice_ml
                IO_rewardA                      = TMP_juice_ml
                
                goto ('Update Stimuli')
            }

            state 'Miss' {
                //play_sound (Failure_sound)

                // Set flags
                TRIAL_outcome                   = "miss"
                CTRL_miss_flag                  = 1
                INFO_ErrorCounter               += 1

                report ('--- OUTCOME: Miss ---')

                goto (
                    target                      = 'End Trial'
                    when                        = (INFO_SteadyStateCounter >= CTRL_NoSteadyStates) || (INFO_TargetCounter >= CTRL_NoTargets)
                    )
                goto ('Dequeue Target')
            }  

            state 'End Trial' {
                dequeue_stimulus (RDP)
                dequeue_stimulus (start_area)
                dequeue_stimulus (arc)
                dequeue_stimulus (arcMask)
                dequeue_stimulus (indicator)
                dequeue_stimulus (fixationCross)
                dequeue_stimulus (target)

                ML_sync                         = 0
                TRIAL_align                     = 0
                TRIAL_end                     	= TRIAL_start

                start_timer (
                    timer                       = ITI_Timer
                    duration                    = CTRL_ITI_ms
                    duration_units              = ms
                    )

                update_stimulus_display ()
                report ('===== TRIAL $TRIAL_end ENDS =====')
                goto (ITI)
            }

            state ITI {
                goto (
                    target                      = 'End paradigm'
                    when                        = INFO_TargetCounter >= CTRL_NoTargets && timer_expired(ITI_Timer)
                    )
                timer_expired (
                    target                      = 'Wait for Joystick Reset'
                    timer                       = ITI_Timer
                    )
            }

            state 'End paradigm' {
                update_stimulus_display ()
                report ('==== SUMMARY: $INFO_HitCounter / $INFO_TargetCounter COINS COLLECTED ====')
                report ('==== ENDING PARADIGM ====')
                play_sound (End_sound)
                yield ()
            }
        }
    }
    stop_device_io (Eyelink)
}