//
// I/O Devices
//

stimulus_display 'Stimulus Display' (0, 0, 0)
iodevice/mio mIO (
    data_interval                           = 1ms
    joystick_direction                      = IO_joystickDirection
    joystick_strength                       = IO_joystickStrength
    joystick_x_raw                          = IO_joystickX_raw
    joystick_y_raw                          = IO_joystickY_raw
    joystick_x_calib                        = IO_joystickX_calib
    joystick_y_calib                        = IO_joystickY_calib
    reward_a                                = IO_rewardA
    )

//
// Variables
//

group INFO {
    var INFO_task                           = 0
    var INFO_SteadyStateCounter             = 0
    var INFO_CoherenceStateCounter          = 0
    var INFO_TargetCounter                  = 0
    var INFO_HitCounter                     = 0
    var INFO_ErrorCounter                   = 0
    var INFO_Juice_ml                       = 0
}

group CTRL {
	var CTRL_reward_ml                      = 0
    var CTRL_Xmax                           = 15.2024
    var CTRL_Ymax                           = 11.4018
    var CTRL_NoTargets                      = 0
	var CTRL_NoSteadyStates                 = 0
    var CTRL_NoCoherenceStates              = 0 
	var CTRL_steadyState_min_ms             = 0 
    var CTRL_steadyState_max_ms             = 0
    var CTRL_SteadyStateDuration_ms         = 0
    var CTRL_TargetDelay_ms                 = 0
    var CTRL_snr_list                       = [.4,.7,1]
    var CTRL_directionChange_list           = [30,60,90]
    var CTRL_ITI_ms                         = 0
    var CTRL_change_mangitude               = 0
    var CTRL_cpr_treshold                   = 0

    var CTRL_arc_alpha                      = 0
    var CTRL_arc_flag                       = 0
    var CTRL_arc_size                       = 0
    var CTRL_arcMask_flag                   = 0

	var CTRL_start_area_size                = 0 
    var CTRL_start_area_alpha               = 0
    var CTRL_start_area_flag                = 0
    
    var CTRL_target_idx                     = 0
    var CTRL_target_size                    = 0
    var CTRL_target_deg                     = 0
    var CTRL_target_duration_ms             = 0
    var CTRL_target_direction               = 0
    var CTRL_target_flag                    = 0
    var CTRL_target_x                       = 0
    var CTRL_target_y                       = 0      
    var CTRL_target_alpha                   = 1
    var CTRL_target_ITI_ms                  = 0
    var CTRL_target_ban_duration_ms         = 0
    
    var CTRL_feedback_ms                    = 150

    var CTRL_hit_flag 					    = 0
    var CTRL_miss_flag                      = 0

    var CTRL_PreRT_ResponseWindow           = 0
    var CTRL_PreSNR_StimDuration            = 0

    var CTRL_cursor_radius                  = .5

    var CTRL_indicator_size                 = .3
    var CTRL_indicator_offset               = 1.25
    var CTRL_indicator_alpha                = 1

    var CTRL_fixation_alpha                 = 1
    var CTRL_fixation_size                  = .3
}

group TRIAL {
    var TRIAL_start                         = 0
    var TRIAL_end                           = 0
    var TRIAL_reactionEvent                 = 0
    var TRIAL_reactionEvent_ts              = 0
    var TRIAL_reactionTrigger               = 0
    var TRIAL_reactionTrigger_ts            = 0
    var TRIAL_RT                            = 0
    var TRIAL_outcome                       = 0
    var TRIAL_type                          = 0
    var TRIAL_align                         = 0
}

group TMP {
    var pi                                  = 3.14159265359
    var TMP_dice 							= 0
	var TMP_RDPdir 							= 0
	var TMP_normJoyDir   					= 0
    var TMP_juice_ml                        = 0
 	var TMP_Feedback						= 0
 	var TMP_accuracy 						= 0
    var TMP_feedback_size                   = 0
    var TMP_score                           = 0 {
        TMP_feedback_size                   = TMP_score*2
    }
}

group ML {
    var ML_sync                             = 0
}

group RDP {
    var RDP_direction                       = 0 {
		// Restrict to circular space [0:359]
		TMP_RDPdir 							= (RDP_direction + 360) % 360
    }
    var RDP_radius                          = 8
    var RDP_y                               = 0
    var RDP_x                               = 0
    var RDP_density                         = 3
    var RDP_dotsize                         = .1
    var RDP_speed                           = 10
    var RDP_coherence                       = 0
    var RDP_lifetime                        = 200
    var RDP_alpha                        	= 1
}

group COL {
    var COL_bg_r                            = 0
    var COL_bg_g                            = 0
    var COL_bg_b                            = 0
    var COL_rdp_r                           = 1
    var COL_rdp_g                           = 1
    var COL_rdp_b                           = 1
    var COL_start_area_r                    = 0
    var COL_start_area_g                    = 0
    var COL_start_area_b                    = 0
    var COL_arc_r                           = 1
    var COL_arc_g                           = 0
    var COL_arc_b                           = 0
    var COL_target_r                        = 1
    var COL_target_g                        = 1
    var COL_target_b                        = 1
    var COL_feedback_r                      = 1
    var COL_feedback_g                      = 0
    var COL_feedback_b                      = 0
    var COL_fix_r                           = 1
    var COL_fix_g                           = 1
    var COL_fix_b                           = 1
}

/*  group LIST_UPDATE {
    var LIST_sample_count                   = 0 (logging = never)
    var LIST_dir_loop_count                 = 0 (logging = never)
    var LIST_dir_idx                        = 0 (logging = never)
    var LIST_prev_dir_idx                   = 0 (logging = never)
    var LIST_dir_samples                    = 100
    var LIST_dir_criterion                  = 10 // deg
    var LIST_dir_sum                        = 0 (logging = never) 
    var LIST_abort_flag                     = 0
    var LIST_step_size                      = 10 
    var LIST_dir_diff                       = [0] (logging = never) 
    var LIST_dir_bool                       = [0] (logging = never) 
    var LIST_dir_change                     = [0] (logging = never) {
        // Check every Nth sample to reduce processing
        if ((LIST_sample_count % 10) == 0) {
        // Basic change point detection 
            // Reset flag
            LIST_dir_loop_count                     = 0        

            // Between-sample (angular) difference
            while(LIST_dir_loop_count < size(LIST_dir_change)-2) {
                LIST_dir_diff[LIST_dir_loop_count]  = abs(((LIST_dir_change[LIST_dir_loop_count] - LIST_dir_change[LIST_dir_loop_count+1] + 180) % 360) - 180) 
                LIST_dir_loop_count                 += 1
            }

            // Reset variables
            LIST_dir_loop_count                     = 0
            LIST_dir_sum                            = 0

            // Check difference values: IF larger than criterion -> true
            while(LIST_dir_loop_count < size(LIST_dir_diff)-1) {
                LIST_dir_bool[LIST_dir_loop_count]  = LIST_dir_diff[LIST_dir_loop_count] > LIST_dir_criterion
                LIST_dir_sum                        = (LIST_dir_bool[LIST_dir_loop_count] == true) + LIST_dir_sum
                LIST_dir_loop_count                 += 1

            }

            // Set flag to 1 to abort trial if no above-threshold change detected during time window
            if (LIST_dir_sum == 0 && LIST_abort_flag == 0 && LIST_sample_count > LIST_dir_samples) {
                LIST_abort_flag                     = 1
            }
        }
    }
}*/

group IO {
    var IO_rewardA                          = 0
    var IO_arc_width                    	= 0
	var IO_arc_trigger_min               	= 0
    var IO_arc_trigger_max               	= 0  
	var IO_cursor_x                       	= 0
    var IO_cursor_y                       	= 0
    var IO_joystickX_raw                 	= 0
    var IO_joystickY_raw                    = 0
    var IO_joystickStrength                 = 0 {                     
  		if (TRIAL_start > TRIAL_end) {
            // Set arc width
            IO_arc_width                    = 180 - (180 * IO_joystickStrength) 

      		// Fix minimum arc size
            if (IO_arc_width < CTRL_target_deg) {
             	IO_arc_width                = CTRL_target_deg
          	} 

            // Target
            if (TRIAL_reactionTrigger == 0) {
            CTRL_target_idx                 = disc_rand(0,199) // Show target?
            }
        }
    }
    var IO_joystickDirection                = 0 {
    	if (TRIAL_start > TRIAL_end) {
            // Calculate tracking accuracy and reward
            TMP_normJoyDir                  = (int)(((int)IO_joystickDirection + (180-TMP_RDPdir) + 360) % 360) 
            TMP_accuracy                    = abs(1 - abs(TMP_RDPdir - IO_joystickDirection) / 180)
            TMP_score                       = IO_joystickStrength * TMP_accuracy
            TMP_juice_ml                    = TMP_score * CTRL_reward_ml
              
            // Cap reward at maximum
            if (IO_joystickStrength > 1) {
                TMP_juice_ml                = (1 * TMP_accuracy) * CTRL_reward_ml
            }
            TMP_Feedback                    = 360 * (TMP_juice_ml / CTRL_reward_ml) 

            /*// Keep track of joystick direction in preceeding time window
            LIST_prev_dir_idx               = LIST_dir_idx
            LIST_dir_idx                    = LIST_sample_count % LIST_dir_samples
            LIST_dir_change[LIST_dir_idx]   = TMP_normJoyDir 
            LIST_sample_count               += 1*/

            // Compute trigger boundaries & flag
            IO_arc_trigger_min              = (int)(((int)(TMP_RDPdir - (IO_arc_width/2) + 360) % 360) + ((180-TMP_RDPdir) + 360)) % 360
            IO_arc_trigger_max              = (int)(((int)(TMP_RDPdir + (IO_arc_width/2) + 360) % 360) + ((180-TMP_RDPdir) + 360)) % 360
            CTRL_arc_flag                   = (TMP_normJoyDir >= IO_arc_trigger_min) && (TMP_normJoyDir <= IO_arc_trigger_max)     
        }
    }
    var IO_joystickX_calib                  = 0  {
        if (TRIAL_start > TRIAL_end) {
            IO_cursor_x                     = (IO_joystickX_calib * CTRL_Xmax) + RDP_x
        }
    }
    var IO_joystickY_calib                  = 0  {
        if (TRIAL_start > TRIAL_end) {
            IO_cursor_y                     = (IO_joystickY_calib * CTRL_Ymax) + RDP_y
        }
    }
}

//
// Sounds
//

wav_file Failure_sound ('./sounds/failure2.wav')
wav_file Reward_sound ('./sounds/reward.wav')
wav_file Reward_sound_2 ('./sounds/reward_2.wav')
wav_file Reward_sound_3 ('./sounds/reward_3.wav')
wav_file SuperReward_sound ('./sounds/Power Up.wav')
wav_file End_sound ('./sounds/Defeat Bowser.wav')

//
// Stimuli
//

blank_screen Background (
    color                       			= COL_bg_r,COL_bg_g,COL_bg_b
    )

stimulus/advstimulus cursor (
    trigger_width                           = 0
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = 0
    x_size                                  = CTRL_cursor_radius * 2
    y_size                                  = CTRL_cursor_radius * 2
    x_position                              = IO_cursor_x
    y_position                              = IO_cursor_y
    shape                                   = format("circle")
    color                                   = 1,1,1
    rotation                                = 0
    alpha_multiplier                        = 1
    version                                 = 1
    autoplay                                = YES
    )

stimulus/r_d_p RDP (
    radius                      			= RDP_radius
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    dot_density                 			= RDP_density
    dot_size                    			= RDP_dotsize
    color                       			= COL_rdp_r,COL_rdp_g,COL_rdp_b
    alpha_multiplier            			= RDP_alpha
    direction                   			= RDP_direction
    speed                       			= RDP_speed
    coherence                   			= RDP_coherence
    lifetime                    			= RDP_lifetime
    announce_dots               			= YES
    autoplay                    			= YES
    )

stimulus/advstimulus start_area (
    trigger_width               			= CTRL_start_area_size
    trigger_watch_x             			= IO_cursor_x   
    trigger_watch_y             			= IO_cursor_y   
    trigger_flag                			= CTRL_start_area_flag
    x_size                      			= CTRL_start_area_size
    y_size                      			= CTRL_start_area_size
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    shape                       			= format("circle")
    color                       			= COL_start_area_r,COL_start_area_g,COL_start_area_b
    rotation                    			= 0
    alpha_multiplier            			= CTRL_start_area_alpha
    version                     			= 1
    autoplay                    			= YES
    )

stimulus/advstimulus arc (
    trigger_width               			= CTRL_arc_size
    trigger_watch_x             			= 0
    trigger_watch_y             			= 0
    trigger_flag                			= CTRL_arc_flag
    x_size                      			= CTRL_arc_size
    y_size                      			= CTRL_arc_size
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    shape                       			= format("circle %d", (integer)IO_arc_width)    
    color                       			= COL_arc_r,COL_arc_g,COL_arc_b
    rotation                    			= -IO_joystickDirection + (IO_arc_width/2)
    alpha_multiplier            			= CTRL_arc_alpha
    version                     			= 1
    autoplay                    			= YES
    )

stimulus/advstimulus arcMask (
    trigger_width                           = CTRL_arc_size - (CTRL_arc_size/5)
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = CTRL_arcMask_flag
    x_size                                  = CTRL_arc_size - (CTRL_arc_size/5)
    y_size                                  = CTRL_arc_size - (CTRL_arc_size/5)
    x_position                              = RDP_x
    y_position                              = RDP_y
    shape                                   = format("circle %d", (integer)360)    
    color                                   = COL_start_area_r,COL_start_area_g,COL_start_area_b
    rotation                                = -IO_joystickDirection + (IO_arc_width/2)
    alpha_multiplier                        = 1
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus indicator (
    trigger_width               			= 0
    trigger_watch_x             			= 0
    trigger_watch_y             			= 0
    trigger_flag                			= 0
    x_size                      			= CTRL_indicator_size
    y_size                      			= CTRL_indicator_size
    x_position                  			= (sin((IO_joystickDirection)*(pi/180)) * CTRL_indicator_offset) + RDP_x
    y_position                  			= (cos((IO_joystickDirection)*(pi/180)) * CTRL_indicator_offset) + RDP_y
    shape                       			= format("symmetric 3")
    color                       			= COL_arc_r,COL_arc_g,COL_arc_b
    rotation                    			= -IO_joystickDirection
    alpha_multiplier            			= CTRL_indicator_alpha
    version                     			= 1
    autoplay                    			= YES
    )

stimulus/advstimulus target (
    trigger_width               			= CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                			= CTRL_target_flag
    x_size                      			= CTRL_target_size
    y_size                      			= CTRL_target_size
    x_position                  			= CTRL_target_x
    y_position                  			= CTRL_target_y
    shape                       			= format("circle")
    color                       			= COL_target_r,COL_target_g,COL_target_b
    rotation                    			= 0
    alpha_multiplier            			= CTRL_target_alpha
    version                     			= 1
    autoplay                    			= YES
    )

stimulus/advstimulus feedback (
    trigger_width               			= 0
    trigger_watch_x             			= 0
    trigger_watch_y             			= 0
    trigger_flag                			= 0
    x_size                      			= TMP_feedback_size
    y_size                      			= TMP_feedback_size
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    shape                       			= format("circle %d", (integer)360)
    color                       			= COL_feedback_r,COL_feedback_g,COL_feedback_b
    rotation                    			= 0
    alpha_multiplier            			= 1
    version                     			= 1
    autoplay                    			= YES
    )

stimulus/advstimulus fixationCross (
    trigger_width                           = 0
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = 0
    x_size                      			= CTRL_fixation_size
    y_size                      			= CTRL_fixation_size
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    shape                       			= format("cross")
    color                       			= COL_fix_r,COL_fix_g,COL_fix_b
    rotation                    			= 0
    alpha_multiplier            			= CTRL_fixation_alpha
    version                     			= 1
    autoplay                    			= YES
    )

//
// Filters
//

//
// Optimizers
//

//
// Resources
//

//
// Protocols
//


protocol 'CPR_solo' {
    report ('Hello! Starting Experiment...')
    start_device_io (mIO)
    live_queue_stimulus (Background)
    update_stimulus_display ()

    // Set desired parameters
    CTRL_reward_ml                              = .5
    CTRL_NoTargets                              = 100000
    CTRL_NoSteadyStates                         = 25
    CTRL_NoCoherenceStates                      = 5 
    CTRL_steadyState_min_ms                     = 1250 
    CTRL_steadyState_max_ms                     = 2500
    CTRL_cpr_treshold                           = .2
    CTRL_arc_alpha                              = 1
    CTRL_arc_size                               = 3.5
    CTRL_indicator_size                         = .3
    CTRL_indicator_offset                       = CTRL_arc_size/2
    CTRL_start_area_size                        = 4 
    CTRL_start_area_alpha                       = 1
    CTRL_target_size                            = .8
    CTRL_target_deg                             = 2 * (asin( (CTRL_target_size/2) / ((CTRL_start_area_size/2) + (CTRL_target_size/2)) ) * (180/pi))
    CTRL_target_duration_ms                 	= 50
    CTRL_target_ITI_ms                          = 500
    CTRL_target_ban_duration_ms                 = 300
    CTRL_ITI_ms                                 = 1000
    TRIAL_start                                 = 0
    TRIAL_end                                   = 0

    trial 'Trial Structure' {
        task LOOP {

            state 'Wait for Joystick Reset' {
		
                goto (
                    target                      = 'Wait for Joystick Movement'
                    when                        = (IO_joystickStrength <= CTRL_cpr_treshold) 
                    )
            }
            
            state 'Wait for Joystick Movement' {
                live_queue_stimulus (start_area)
                update_stimulus_display ()

				COL_start_area_r 				= 1
				COL_start_area_g 				= 1
				COL_start_area_b 				= 1
				
                goto (
                    target                      = 'New Trial'
                    when                        = (IO_joystickStrength > CTRL_cpr_treshold) 
                    )
            }

            state 'New Trial' { 
            	COL_start_area_r 				= 0
				COL_start_area_g 				= 0
				COL_start_area_b 				= 0
                TRIAL_start                   	+= 1
                TRIAL_align                     = 1
                ML_sync                         = 1
                INFO_SteadyStateCounter         = 0
                INFO_CoherenceStateCounter      = 0
                INFO_task                       = "CPR_solo_stepfunction_neutral"

                // Initial trial specs
                RDP_direction                   = disc_rand(0,359)
                RDP_coherence                   = CTRL_snr_list[disc_rand(0,size(CTRL_snr_list)-1)]

          		// Start with easiest condition
                if (TRIAL_start == 1) {
                    RDP_coherence               = CTRL_snr_list[size(CTRL_snr_list)-1]
                }

                report ('===== TRIAL $TRIAL_start STARTS =====')
                goto ('Show Stimuli')
            }

            state 'Show Stimuli' {
                live_queue_stimulus (RDP)
                live_queue_stimulus (start_area)
                live_queue_stimulus (arc)
                live_queue_stimulus (arcMask)
                live_queue_stimulus (indicator)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()   

                goto ('Dequeue Target')
            }

            state 'Dequeue Target' {
                //Remove existing targets from screen
                dequeue_stimulus (target)
                dequeue_stimulus (feedback)
                update_stimulus_display ()
                
                // Reset flag
                TRIAL_reactionTrigger           = 0
                CTRL_hit_flag                   = 0
                CTRL_miss_flag                  = 0

                goto ('Check Counters')

            }

            state 'Check Counters' {
                goto (
                    target                      = 'End Trial'
                    when                        = (INFO_SteadyStateCounter >= CTRL_NoSteadyStates) || (INFO_TargetCounter >= CTRL_NoTargets)
                    )
                goto (
                    target                      = 'Update Stimuli'
                    when                        =  timer_expired(SteadyStateDurationTimer) == 0
                    )
                goto (
                    target                      = 'Set up steady state'
                    when                        =  timer_expired(SteadyStateDurationTimer) 
                    )
            }

            state 'Set up steady state' {
            	// Sync Matlab & reset flags
                ML_sync                         = 0
                ML_sync                         = 1

                // Draw state parameters
                CTRL_SteadyStateDuration_ms     = disc_rand(CTRL_steadyState_min_ms,CTRL_steadyState_max_ms) // Duration of state
                CTRL_change_mangitude           = CTRL_directionChange_list[disc_rand(0,size(CTRL_directionChange_list)-1)] // Magnitude of RDP direction change
                TMP_dice                        = disc_rand(0,1) // Clockwise vs Counter-clockwise RDP direction change
                INFO_SteadyStateCounter         += 1

                // Change RDP coherence after N states
                if (INFO_CoherenceStateCounter >= CTRL_NoCoherenceStates) {
                    INFO_CoherenceStateCounter  = 0
                    RDP_coherence               = CTRL_snr_list[disc_rand(0,size(CTRL_snr_list)-1)]
                }
                
                // Keep track of number of states with same coherence level
                INFO_CoherenceStateCounter      = INFO_CoherenceStateCounter + 1
                TRIAL_type                      = format("Coh %d", (integer)RDP_coherence)

                if (INFO_SteadyStateCounter > 1) {
                    // Draw change direction
                    TMP_dice                    = disc_rand(0,1)

                    // Draw magnitude of change
                    if (TMP_dice == 1) {
                        RDP_direction           = RDP_direction + CTRL_change_mangitude
                    }

                    if (TMP_dice == 0) {
                        RDP_direction           = RDP_direction - CTRL_change_mangitude
                    }
                }

                start_timer (
                    timer                       = SteadyStateDurationTimer
                    duration                    = CTRL_SteadyStateDuration_ms
                    duration_units              = ms
                    )

                // Block target appearance in time window after state onset
                start_timer (
                    timer                       = NoTargetTimer_StateOnset
                    duration                    = CTRL_target_ban_duration_ms
                    duration_units              = ms
                    )

                report ('--- Steady state $INFO_SteadyStateCounter ---')
                          
                goto ('Update Stimuli')
            }


			state 'Update Stimuli' { 
                goto (
                    target                      = 'Dequeue Target'
                    when                        = CTRL_hit_flag && timer_expired(FeedbackTimer) && TRIAL_reactionTrigger
                    )
                goto (
                    target                      = 'Target presentation'
                    when                        = CTRL_target_idx == 0 && TRIAL_reactionTrigger == 0 && timer_expired(NoTargetTimer) && timer_expired(NoTargetTimer_StateOnset)
                    ) 
                goto (
                    target                      = 'Hit'
                    when                        = CTRL_arc_flag && TRIAL_reactionTrigger && (CTRL_hit_flag + CTRL_miss_flag) == 0 && timer_expired(TargetDurationTimer) == 0
                    )  
                goto (
                    target                      = 'Miss'
                    when                        = timer_expired(TargetDurationTimer) && TRIAL_reactionTrigger && (CTRL_hit_flag + CTRL_miss_flag) == 0
                    )              
                goto (
                    target                      = 'Check Counters'
                    when                        = timer_expired(SteadyStateDurationTimer) && TRIAL_reactionTrigger == 0
                    )
            }

       		state 'Target presentation' {
            	// Target coordinates according to RDP direction
                CTRL_target_x                   = (sin((RDP_direction)*(pi/180)) * ((CTRL_start_area_size/3))) + RDP_x
                CTRL_target_y                   = (cos((RDP_direction)*(pi/180)) * ((CTRL_start_area_size/3))) + RDP_y

                live_queue_stimulus (target)
                update_stimulus_display ()

                TRIAL_reactionTrigger           = 1
                INFO_TargetCounter              = INFO_TargetCounter + 1

                start_timer (
                    timer                       = TargetDurationTimer
                    duration                    = CTRL_target_duration_ms
                    duration_units              = ms
                    )

                // Block target appearance
                start_timer (
                    timer                       = NoTargetTimer
                    duration                    = (CTRL_target_duration_ms + CTRL_target_ITI_ms)
                    duration_units              = ms
                    )

                report ('--- SHOW TARGET $INFO_TargetCounter ---')
                goto ('Update Stimuli')
            }

            state 'Hit' {
            	// Auditory feedback
            	if (TMP_juice_ml > (CTRL_reward_ml*.95)) {
            		play_sound (SuperReward_sound)
            	}

                if (TMP_juice_ml > (CTRL_reward_ml*.75) && TMP_juice_ml <= (CTRL_reward_ml*.95)) {
                    play_sound (Reward_sound_3)
                }

                if (TMP_juice_ml > (CTRL_reward_ml*.5) && TMP_juice_ml <= (CTRL_reward_ml*.75)) {
                    play_sound (Reward_sound_2)
                }

            	if (TMP_juice_ml <= (CTRL_reward_ml*.5)) {
            		play_sound (Reward_sound)
            	}

				//Visual feedback
                queue_stimulus (feedback)
                queue_stimulus (fixationCross)
                update_stimulus_display ()

               	// Set flags and add to counters
                TRIAL_outcome                   = "hit"
                CTRL_hit_flag                   = 1
                INFO_HitCounter                 = INFO_HitCounter + 1

                report ('--- OUTCOME: Hit ---')

                start_timer (
                    timer                       = FeedbackTimer
                    duration                    = CTRL_feedback_ms
                    duration_units              = ms
                    )

                goto ('Give reward')
            }
    
            state 'Give reward' {
                report ('REW: $TMP_juice_ml')
                INFO_Juice_ml                   += TMP_juice_ml
                IO_rewardA                      = TMP_juice_ml
                
                goto ('Update Stimuli')
            }

            state 'Miss' {
                //play_sound (Failure_sound)

                // Set flags
                TRIAL_outcome                   = "miss"
                CTRL_miss_flag                  = 1
                INFO_ErrorCounter               += 1

                report ('--- OUTCOME: Miss ---')

                goto (
                    target                      = 'End Trial'
                    when                        = (INFO_SteadyStateCounter >= CTRL_NoSteadyStates) || (INFO_TargetCounter >= CTRL_NoTargets)
                    )
                goto ('Dequeue Target')
            }  

            state 'End Trial' {
                dequeue_stimulus (RDP)
                dequeue_stimulus (start_area)
                dequeue_stimulus (arc)
                dequeue_stimulus (arcMask)
                dequeue_stimulus (indicator)
                dequeue_stimulus (fixationCross)
                dequeue_stimulus (target)

                ML_sync                         = 0
                TRIAL_align                     = 0
                TRIAL_end                     	= TRIAL_start

                start_timer (
                    timer                       = ITI_Timer
                    duration                    = CTRL_ITI_ms
                    duration_units              = ms
                    )

                update_stimulus_display ()
                report ('===== TRIAL $TRIAL_end ENDS =====')
                goto (ITI)
            }

            state ITI {
                goto (
                    target                      = 'End paradigm'
                    when                        = INFO_TargetCounter >= CTRL_NoTargets && timer_expired(ITI_Timer)
                    )
                timer_expired (
                    target                      = 'Wait for Joystick Reset'
                    timer                       = ITI_Timer
                    )
            }

            state 'End paradigm' {
                update_stimulus_display ()
                report ('==== SUMMARY: $INFO_HitCounter / $INFO_TargetCounter COINS COLLECTED ====')
                report ('==== ENDING PARADIGM ====')
                play_sound (End_sound)
                yield ()
            }
        }
    }
}