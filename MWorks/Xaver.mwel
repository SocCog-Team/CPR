// ADD FEEDBACK FOR AGENT
// ADD VISUAL FEEDBACK FOR MISS CONDITION

//
// I/O Devices
//

stimulus_display 'Stimulus Display' (0, 0, 0)
iodevice/mio mIO (
    data_interval                           = 1ms
    joystick_direction                      = IO_joystickDirection
    joystick_strength                       = IO_joystickStrength
    joystick_x_raw                          = IO_joystickX_raw
    joystick_y_raw                          = IO_joystickY_raw
    reward_a                                = IO_rewardA
    )

//
// Variables
//

group INFO {
    var INFO_task                           = 0
    var INFO_TargetCounter                  = 0
    var INFO_HitCounter                     = 0
    var INFO_ErrorCounter                   = 0
}

group CTRL {
    var CTRL_reward_ml                      = 0
    var CTRL_js_reward_ml                   = 0
    var CTRL_NoTargets                      = 0
    var CTRL_ITI_ms                         = 0
    var CTRL_Xmax                           = 15.2024
    var CTRL_Ymax                           = 11.4018

    var CTRL_arc_alpha                      = 0
    var CTRL_arc_flag                       = 0
    var CTRL_arc_size                       = 0

	var CTRL_start_area_size                = 0 
    var CTRL_start_area_alpha               = 0
    var CTRL_start_area_flag                = 0
    
    var CTRL_target_delay_min_ms            = 0
    var CTRL_target_delay_max_ms            = 0
    var CTRL_target_reward_ml               = 0
    var CTRL_target_idx                     = 0
    var CTRL_target_size                    = 0
    var CTRL_target_x                       = 0
    var CTRL_target_y                       = 0
    var CTRL_target_deg                     = 0
    var CTRL_target_duration_ms             = 0
    var CTRL_target_direction               = 0
    var CTRL_target_flag                    = 0  
    var CTRL_target_alpha                   = 0
    var CTRL_target_ITI_ms                  = 0
    var CTRL_target_ban_duration_ms         = 0
   
    var CTRL_hit_flag                       = 0
    var CTRL_miss_flag                      = 0

    var CTRL_ResponseWindow_ms              = 0

    var CTRL_cursor_radius                  = 0
}

group TRIAL {
    var TRIAL_start                         = 0
    var TRIAL_end                           = 0
    var TRIAL_reactionEvent                 = 0
    var TRIAL_reactionEvent_ts              = 0
    var TRIAL_reactionTrigger               = 0
    var TRIAL_reactionTrigger_ts            = 0
    var TRIAL_RT                            = 0
    var TRIAL_outcome                       = 0
    var TRIAL_type                          = 0
    var TRIAL_align                         = 0
}

group TMP {
    // Local
    var pi                                  = 3.14159265359
}


group COL {
    var COL_bg_r                            = 0
    var COL_bg_g                            = 0
    var COL_bg_b                            = 0
    var COL_start_area_r                    = 0
    var COL_start_area_g                    = 0
    var COL_start_area_b                    = 0
    var COL_cursor_r                        = 1
    var COL_cursor_g                        = 1
    var COL_cursor_b                        = 1
    var COL_target_r                        = 1
    var COL_target_g                        = 1
    var COL_target_b                        = 1
}

group IO {
    var IO_fixation_flag                    = 0
    var IO_rewardA                          = 0
    var IO_arc_width                        = 0
	var IO_arc_trigger_min               	= 0
    var IO_arc_trigger_max               	= 0  
	var IO_cursor_x                       	= 0
    var IO_cursor_y                       	= 0
    var IO_joystickX_raw                 	= 0 {
            IO_cursor_x                     = ((IO_joystickX_raw/511.5)-1) * CTRL_Xmax
    }
    var IO_joystickY_raw                    = 0 {
            IO_cursor_y                     = ((IO_joystickY_raw/511.5)-1) * CTRL_Ymax
    }
    var IO_joystickStrength                 = 0 
    var IO_joystickDirection                = 0
}

//
// Optimizers
//

//
// Sounds
//

wav_file Acquire_sound ('./sounds/acquire.wav')
wav_file Failure_sound ('./sounds/failure2.wav')
wav_file JS_Reward_sound ('./sounds/lever_down.wav')
wav_file Reward_sound ('./sounds/reward.wav')
wav_file SuperReward_sound ('./sounds/Power Up.wav')
wav_file End_sound ('./sounds/Defeat Bowser.wav')

//
// Stimuli
//

blank_screen Background (
    color                       			= COL_bg_r,COL_bg_g,COL_bg_b
    )

stimulus/advstimulus cursor (
    trigger_width                           = 0
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = 0
    x_size                                  = CTRL_cursor_radius * 2
    y_size                                  = CTRL_cursor_radius * 2
    x_position                              = IO_cursor_x
    y_position                              = IO_cursor_y
    shape                                   = format("circle")
    color                                   = COL_cursor_r,COL_cursor_g,COL_cursor_b
    rotation                                = 0
    alpha_multiplier                        = 1
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus start_area (
    trigger_width               			= CTRL_start_area_size
    trigger_watch_x             			= IO_cursor_x   
    trigger_watch_y             			= IO_cursor_y   
    trigger_flag                			= CTRL_start_area_flag
    x_size                      			= CTRL_start_area_size
    y_size                      			= CTRL_start_area_size
    x_position                  			= 0
    y_position                  			= 0
    shape                       			= format("circle")
    color                       			= COL_start_area_r,COL_start_area_g,COL_start_area_b
    rotation                    			= 0
    alpha_multiplier            			= CTRL_start_area_alpha
    version                     			= 1
    autoplay                    			= YES
    )


stimulus/advstimulus target (
    trigger_width               			= CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                			= CTRL_target_flag
    x_size                      			= CTRL_target_size
    y_size                      			= CTRL_target_size
    x_position                  			= CTRL_target_x
    y_position                  			= CTRL_target_y
    shape                       			= format("circle")
    color                       			= COL_target_r,COL_target_g,COL_target_b
    rotation                    			= 0
    alpha_multiplier            			= CTRL_target_alpha
    version                     			= 1
    autoplay                    			= YES
    )

// Filters
//

//
// Optimizers
//

//
// Resources
//

//
// Protocols
//

protocol 'RT_measurement' {
    start_device_io (mIO)
    live_queue_stimulus (Background)
    live_queue_stimulus (cursor)
        
    CTRL_reward_ml                      = .2
    CTRL_js_reward_ml                   = .1
    CTRL_NoTargets                  	= 5000
    CTRL_ResponseWindow_ms              = 10000
    CTRL_target_delay_min_ms            = 500
    CTRL_target_delay_max_ms            = 1000
    CTRL_target_size                    = 8
    CTRL_target_alpha                   = .5
    CTRL_start_area_size                = 3 
    CTRL_start_area_alpha               = .3
    CTRL_cursor_radius                  = .5
    CTRL_ITI_ms                         = 1000
    INFO_HitCounter                     = 0
    INFO_ErrorCounter                   = 0
    TRIAL_start                         = 0
    TRIAL_end                           = 0

    update_stimulus_display ()

    trial 'Main Task System' {
        task LOOP {
            state 'Wait [Joystick Reset]' {
                live_queue_stimulus (start_area)
                update_stimulus_display ()
                
                goto (
                    target              = 'Wait [Joystick Movement]'
                    when                = CTRL_start_area_flag
                    )
            }

            state 'Wait [Joystick Movement]' {
                COL_start_area_r 		= 1
				COL_start_area_g 		= .5
				COL_start_area_b 		= .5
				
                goto (
                    target           	= 'Feedback [Initial movement]'
                    when             	= CTRL_start_area_flag == 0
                    )
            }
                    
            state 'Feedback [Initial movement]' {
                if (CTRL_js_reward_ml > 0) {
                    play_sound (JS_Reward_sound)
                    IO_rewardA              = CTRL_js_reward_ml
                    report ('Joystick movement')
                    report ('REW: $IO_rewardA')
                }

            goto ('Wait [Joystick Reset 2]')
        }
   			state 'Wait [Joystick Reset 2]' {
                goto (
                    target              = 'New Trial'
                    when                = CTRL_start_area_flag
                    )
            }

            state 'New Trial' {
               	COL_start_area_r 		= 1
				COL_start_area_g 		= 1
				COL_start_area_b 		= 1
                TRIAL_start             = TRIAL_start + 1
                TRIAL_align             = 1
                INFO_task               = "RT"

                start_timer (
                    timer               = TargetTimer
                    duration            = disc_rand(CTRL_target_delay_min_ms,CTRL_target_delay_max_ms)
                    duration_units      = ms
                    )

                report ('===== TRIAL $TRIAL_start START =====')
                goto ('Wait for Target')
            }

            state 'Wait for Target' {
                goto (
                    target              = 'False Alarm'
                    when                = timer_expired(TargetTimer) == false && CTRL_start_area_flag == false
                    )                
                goto (
                    target              = 'Show Target'
                    when                = timer_expired(TargetTimer)
                    )
            }

            state 'Show Target' {
                report ('-- Show Target --')
                CTRL_target_direction   = disc_rand(0,359)
                CTRL_target_x           = sin((CTRL_target_direction)*(pi/180)) * (3 + (CTRL_target_size/2))
                CTRL_target_y           = cos((CTRL_target_direction)*(pi/180)) * (3 + (CTRL_target_size/2))
                TRIAL_type              = format("Dir%d", (integer)CTRL_target_direction)

                dequeue_stimulus (start_area)
                live_queue_stimulus (target)
                update_stimulus_display ()

                TRIAL_reactionTrigger       = 1
                TRIAL_reactionTrigger_ts    = now()

                start_timer (
                    timer               = ResponseTimer
                    duration            = CTRL_ResponseWindow_ms
                    duration_units      = ms
                    )

                update_stimulus_display ()
                goto ('Response Window')
            }

            state 'Response Window' {
                goto (
                    target              = 'Hit'
                    when                = CTRL_target_flag == true
                    //when                = CTRL_start_area_flag == false
                    )
                timer_expired (
                    target              = 'Miss'
                    timer               = ResponseTimer
                    )
            }

            state 'Hit' {
                TRIAL_reactionEvent     = 1
                TRIAL_reactionEvent_ts  = now()
                TRIAL_RT                = (TRIAL_reactionEvent_ts - TRIAL_reactionTrigger_ts)/1000
                TRIAL_outcome           = "hit"
                INFO_HitCounter         = INFO_HitCounter + 1
                
                if (TRIAL_RT < 500) {
                	IO_rewardA         	= CTRL_reward_ml * 3
                }

                if (TRIAL_RT >= 500 && TRIAL_RT < 750) {
                	IO_rewardA         	= CTRL_reward_ml * 2
                }

                if (TRIAL_RT >= 750 && TRIAL_RT < 1500) {
                    IO_rewardA          = CTRL_reward_ml
                }
                
                if (TRIAL_RT >= 1500 && TRIAL_RT < CTRL_ResponseWindow_ms) {
                	IO_rewardA         	= CTRL_reward_ml / 2
                }
                
                //IO_rewardA         		= CTRL_reward_ml
                play_sound (Reward_sound)                
                report ('-- Outcome: Hit --')
                report ('RT: $TRIAL_RT')
                report ('REW: $IO_rewardA')

                goto ('End Trial')
            }

            state 'Miss' {
                TRIAL_outcome           = "miss"
                TRIAL_RT                = 0

                play_sound (Failure_sound)
                report ('-- Outcome: Miss --')
                goto ('End Trial')
            }

            state 'False Alarm' {
                TRIAL_reactionEvent     = 1
                TRIAL_outcome           = "false alarm"
                TRIAL_RT                = 0
                TRIAL_type              = format("Dir%d", (integer)999)

                play_sound (Failure_sound)
                report ('-- Outcome: False alarm --')
                goto ('End Trial')
            }

            state 'End Trial' {
                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                dequeue_stimulus (target)
                dequeue_stimulus (start_area)
                update_stimulus_display ()

                TRIAL_reactionTrigger   = 0
                TRIAL_reactionEvent     = 0
                TRIAL_align             = 0
                TRIAL_end               = TRIAL_start
                
                report ('==== END OF TRIAL $TRIAL_end ====')
                goto (
                    target              = 'End paradigm'
                    when                = INFO_HitCounter >= CTRL_NoTargets
                    )
                goto ('ITI')
            }

            state 'ITI' {
                timer_expired (
                    target              = 'Wait [Joystick Reset]'
                    timer               = ITI_Timer
                    )
            }

            state 'End paradigm' {
                report ('==== $INFO_HitCounter TARGETS COLLECTED ====')
                report ('==== ENDING PARADIGM ====')
                play_sound (End_sound)
                yield ()
            }
        }
    }
}
