

group VARS {
    var CTRL_ITI_ms                                 = 0
    var CTRL_cycle_duration_ms                      = 0
    var CTRL_cancel_action_flag                     = false
    var TRIAL_start                                 = 0
    var TRIAL_end                                   = 0
    var INFO_CoherenceStateCounter                  = 0
    var INFO_FrameCounter                           = 0
    var INFO_TrialTargetCounter                     = 0
    var CTRL_coh_block_duration_ms                  = 0
    var cancelTrigger                               = false
    var ML_sync                                     = 0
}


group RDP {
    var RDP_direction                       = (float) 0
    var RDP_radius                          = 8
    var RDP_y                               = 0
    var RDP_x                               = 0
    var RDP_density                         = 2.5
    var RDP_dotsize                         = .2
    var RDP_speed                           = 8
    var RDP_coherence                       = 1
    var RDP_lifetime                        = 0 // (1/120) * 30 * 1000 // 30 frames - 250ms
    var RDP_alpha                        	= 1
    var RDP_seed                            = 1
}


group Import {
    var RDP_direction_lst                   = []
    var RDP_coherence_lst                   = []
    var CTRL_feedback_ts_lst                = []
    var CTRL_counter                        = [999]
}

group Paths {
    var fname_rdp_dir                       = '/Users/fschneider/Desktop/RDP_direction.txt'
    var fname_feedback_ts                   = '/Users/fschneider/Desktop/feedback_ts.txt'
    var fname_counter                       = '/Users/fschneider/Desktop/counter.txt'
}

//
// Optimizers
//

filter/file2array RDP_direction_txt (
    output                                  = RDP_direction_lst
    file_name                               = fname_rdp_dir
    version                                 = 1
    )

filter/file2array CTRL_feedback_ts_txt (
    output                                  = CTRL_feedback_ts_lst
    file_name                               = fname_feedback_ts
    version                                 = 1
    )


filter/file2array CTRL_counter_txt (
    output                                  = CTRL_counter
    file_name                               = fname_counter
    version                                 = 1
    )

//
// Sounds
//

wav_file Acquire_sound ('./sounds/acquire.wav')
wav_file Reward_sound ('./sounds/reward.wav')
wav_file Failure_sound ('./sounds/failure2.wav')
wav_file End_sound ('./sounds/Defeat Bowser.wav')


//
// Stimuli
//

blank_screen Background (
    color                       			= 0,0,0
    )

stimulus/advstimulus fixationCross (
    trigger_width                           = 0
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = 0
    x_size                                  = .5
    y_size                                  = .5
    x_position                              = 0
    y_position                              = 0
    shape                                   = format("cross")
    color                                   = 1,1,1
    rotation                                = 0
    alpha_multiplier                        = 1
    version                                 = 1
    autoplay                                = YES
    )
    
stimulus/r_d_p RDP (
    radius                      			= RDP_radius
    x_position                  			= RDP_x
    y_position                  			= RDP_y
    dot_density                 			= RDP_density // dots/dva
    dot_size                    			= RDP_dotsize // dva
    color                       			= 1,1,1
    alpha_multiplier            			= RDP_alpha
    direction                   			= RDP_direction
    speed                       			= RDP_speed // dva/s
    coherence                   			= RDP_coherence
    lifetime                    			= RDP_lifetime
    announce_dots               			= YES // YES for dot position
    autoplay                    			= YES
    )

stimulus/advstimulus start_area (
    trigger_width               			= 0
    trigger_watch_x             			= 0   
    trigger_watch_y             			= 0   
    trigger_flag                			= 0
    x_size                      			= 3
    y_size                      			= 3
    x_position                  			= 0
    y_position                  			= 0
    shape                       			= format("circle")
    color                       			= 0,0,0
    rotation                    			= 0
    alpha_multiplier            			= 1
    version                     			= 1
    autoplay                    			= YES
    )


//
// Protocols
//


protocol 'RDP_test' {
    live_queue_stimulus (Background)
    update_stimulus_display ()

    // Set desired parameters
    CTRL_ITI_ms                                 = (1000/120) * 240 // 240 frames - 2000ms
    CTRL_cycle_duration_ms                      = 60000
    CTRL_coh_block_duration_ms                  = 10000
    TRIAL_start                                 = 0
    TRIAL_end                                   = 0
    INFO_CoherenceStateCounter                  = 0

    // Wait for update to be finished                
    while (CTRL_counter[0] != TRIAL_start) {
        wait (
            duration                            = 100
            duration_units                      = ms
            )
        
        // Update trial parameters
        fname_rdp_dir                           = fname_rdp_dir 
        fname_feedback_ts                       = fname_feedback_ts
        fname_counter                           = fname_counter
        }

    // Initialise timer
    start_timer (
        timer                                   = CoherenceTimer
        duration                                = 1
        duration_units                          = ms
    )


    trial 'Trial Structure' (interruptible = YES) {
        task LOOP {

            state 'New Trial' (interruptible = NO) { 
                ML_sync                         = 1 // sync
                TRIAL_start                     += 1 // Count trial number
                ML_sync                         = 0 // Stop sync

                report ('===== STIMULUS CYCLE $TRIAL_start START =====')
                goto ('Show Stimuli')
            }

            state 'Show Stimuli' (interruptible = NO) {
                //report ('Show Stimuli')
                
                start_timer (
                    timer                       = CycleDurationTimer
                    duration                    = CTRL_cycle_duration_ms
                    duration_units              = ms
                    )

                CTRL_cancel_action_flag         = false

                // Update stimulus parameters
                schedule (
                    delay                       = next_frame_time() - now()
                    duration                    = 1000000 / refresh_rate()
                    repeats                     = -999
                    cancel                      = CTRL_cancel_action_flag
                    ) {
                    INFO_FrameCounter           += 1 // use this variable to determine the onset of the actual signal
                    RDP_direction               = RDP_direction_lst[INFO_FrameCounter] // Stimulus direction of state
                }

                live_queue_stimulus (RDP)
                live_queue_stimulus (start_area)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()

                goto ('Update Stimuli')
            }


			state 'Update Stimuli' (interruptible = YES) { 
                goto (
                    target                      = 'End Trial'
                    when                        =  timer_expired(CycleDurationTimer)
                    )
            }

            state 'End Trial' (interruptible = NO) {

                dequeue_stimulus (RDP)
                dequeue_stimulus (start_area)
                dequeue_stimulus (fixationCross)

                TRIAL_end                     	= TRIAL_start
                CTRL_cancel_action_flag         = true 

                start_timer (
                    timer                       = ITI_Timer
                    duration                    = CTRL_ITI_ms
                    duration_units              = ms
                    )

                update_stimulus_display ()
                report ('===== STIMLULUS CYCLE $TRIAL_end END =====')
                goto (ITI)
            }

            state 'ITI' (interruptible = YES) {

                // Wait for update to be finished                
                while (CTRL_counter[0] != TRIAL_start) {
                    wait (
                        duration                = 100
                        duration_units          = ms
                        )
                    
                    // Update trial parameters
                    fname_rdp_dir                           = fname_rdp_dir 
                    fname_feedback_ts                       = fname_feedback_ts
                    fname_counter                           = fname_counter
                    }

                goto (
                    target                      = 'End paradigm'
                    when                        = timer_expired(ITI_Timer)
                    )
            }
            state 'End paradigm' (interruptible = NO) {
                update_stimulus_display ()
                play_sound (End_sound)
                cancelTrigger                   = true
                yield ()
            }
        }
    }
}

