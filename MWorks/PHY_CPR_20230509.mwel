
//
// I/O Devices
//

stimulus_display 'Stimulus Display' (0, 0, 0)

iodevice/omniplex Omniplex (
    data_interval                           = 1ms
    output_variable                         = IO_spikes
    omniplex_ip                             = '192.168.1.2'
    port                                    = 27015
    bkohg_out16                             = IO_syncWord
    )

iodevice/mio mIO (
    data_interval                           = 1ms
    joystick_x_raw                          = IO_joystickX_raw
    joystick_y_raw                          = IO_joystickY_raw
    reward_a                                = IO_rewardA
    sendword								= IO_syncWord
    )

filter/joystick_calibrator joystick_server (
    maxX                                    = IO_joystickX_raw_max
    minX                                    = IO_joystickX_raw_min
    maxY                                    = IO_joystickY_raw_max
    minY                                    = IO_joystickY_raw_min
    rawX                                    = IO_joystickX_raw
    rawY                                    = IO_joystickY_raw
    strength                                = IO_joystickStrength
    direction                               = IO_joystickDirection
    trigger                                 = IO_joystickTrigger
    capStrength                             = YES
    )

mouse_input Mouse (
    mouse_position_x                        = IO_mouse_x
    mouse_position_y                        = IO_mouse_y
    mouse_down                              = IO_mouse_down
    hide_cursor                             = YES
    use_mirror_window                       = NO
    )

eyelink Eyelink (
    data_interval                           = 1ms
    eye_rx                                  = EYE_rightX_raw
    eye_ry                                  = EYE_rightY_raw
    eye_lx                                  = EYE_leftX_raw
    eye_ly                                  = EYE_leftY_raw
    eye_x                                   = EYE_x_raw
    eye_y                                   = EYE_y_raw
    href_rx                                 = EYE_hrefRightX
    href_ry                                 = EYE_hrefRightY
    href_lx                                 = EYE_hrefLeftX
    href_ly                                 = EYE_hrefLeftY
    pupil_rx                                = EYE_pupilRightX
    pupil_ry                                = EYE_pupilRightY
    pupil_lx                                = EYE_pupilLeftX
    pupil_ly                                = EYE_pupilLeftY
    pupil_size_r                            = EYE_pupilRightSize
    pupil_size_l                            = EYE_pupilLeftSize
    eye_time                                = EYE_sampleTime
    tracking_dist                           = 1024
    tracker_ip                              = '100.1.1.1'
    )

standard_eye_calibrator EyeCalibrator (
    eyeh_raw                                = EYE_x_raw
    eyev_raw                                = EYE_y_raw
    eyeh_calibrated                         = EYE_x_dva
    eyev_calibrated                         = EYE_y_dva
    )

basic_eye_monitor EyeMonitor (
    eyeh_calibrated                         = EYE_x_dva
    eyev_calibrated                         = EYE_y_dva
    eye_state                               = EYE_saccade
    width_samples                           = 5
    saccade_entry_speed                     = 50
    saccade_exit_speed                      = 20
    )

/*
blink_correction Blink (
    data_interval                           = 1ms
    fixationPoint_in                        = IO_fixation_flag
    fixationPoint_corrected                 = IO_fixation_corrected_flag
    eyeLink_raw_x                           = EYE_x_raw
    initial_delay                           = 30
    max_blink_duration                      = 270
    blink_counter                           = INFO_FixBreak_Counter
    debug_messages                          = false
    )*/


//
// Variables
//

group INFO {
    var INFO_task                           = 0
    var INFO_StateCounter                   = 0
    var INFO_CoherenceStateCounter          = 0
    var INFO_TargetCounter                  = 0
    var INFO_HitCounter                     = 0
    var INFO_ErrorCounter                   = 0
    var INFO_FixBreak_Counter               = 0
    var INFO_Juice_ml                       = 0
}

group CTRL {
    var CTRL_reward_ml                      = 0
    var CTRL_reward_max_ml                  = 0
    var CTRL_reward_min_ml                  = 0
    var CTRL_reward_cum_ml                  = 0
    var CTRL_reward_power                   = 0
    var CTRL_direct_reward_flag             = 0
    var CTRL_reward_penalty_ml              = 0
    var CTRL_NoStimuli                      = 0
    var CTRL_NoTargets                      = 0
    var CTRL_NoStates                       = 0
    var CTRL_NoCoherenceStates              = 0 
    var CTRL_state_min_ms                   = 0 
    var CTRL_state_max_ms                   = 0
    var CTRL_nTarget 						= 0
    var CTRL_state_duration_ms              = 0
    var CTRL_TargetDelay_ms                 = 0
    var CTRL_snr_list                       = [.1,.3,.9]
    var CTRL_directionChange_list           = [45,90,135]
    var CTRL_ITI_ms                         = 0
    var CTRL_cpr_treshold                   = 0
    var CTRL_Xmax                           = 15.2024
    var CTRL_Ymax                           = 11.4018
    var CTRL_show_agent                     = 0

    var CTRL_arc_alpha                      = 0
    var CTRL_arc_flag                       = 0
    var CTRL_arc_size                       = 0

    var CTRL_start_area_size                = 0 
    var CTRL_start_area_alpha               = 0
    var CTRL_start_area_flag                = 0
    
    var CTRL_target_reward_ml               = 0
    var CTRL_target_idx                     = 0
    var CTRL_target_size                    = 0
    var CTRL_target_offset                  = 0
    var CTRL_target_deg                     = 0
    var CTRL_target_duration_ms             = 0
    var CTRL_target_flag                    = 0
    var CTRL_target2_flag                   = 0
    var CTRL_target3_flag                   = 0
    var CTRL_target4_flag                   = 0
    var CTRL_target_x                       = 0
    var CTRL_target2_x                      = 0
    var CTRL_target3_x                      = 0
    var CTRL_target4_x                      = 0
    var CTRL_target_y                       = 0    
    var CTRL_target2_y                      = 0    
    var CTRL_target3_y                      = 0    
    var CTRL_target4_y                      = 0    
    var CTRL_target_alpha                   = 0
    var CTRL_target_ITI_ms                  = 0
    var CTRL_target_ban_duration_ms         = 0
   
    var CTRL_feedback_alpha                 = 0 
    var CTRL_feedback_ms                    = 0
    var CTRL_feedback_flag                  = 0

    var CTRL_hit_flag                       = 0
    var CTRL_miss_flag                      = 0

    var CTRL_cursor_radius                  = .5

    var CTRL_joystick_penalty_flag          = 0
    var CTRL_joystick_strength_min          = .1
    var CTRL_joystick_strength_max          = .99
    var CTRL_js_calibration_flag            = 0

    var CTRL_fixation_x                     = 0
    var CTRL_fixation_y                     = 0
    var CTRL_fixation_hold_ms               = 0
    var CTRL_fixationWidth_dva              = 100
    var CTRL_fixation_duration_ms           = 500
    var CTRL_fixationDotSize_dva            = .5
    var CTRL_fixation_alpha                 = 1
    var CTRL_fixation_size                  = .3
    var CTRL_fixation_break_flag            = 0
    var CTRL_fixation_penalty_flag          = 0
    var CTRL_minFixBreak_duration_ms        = 300

    var CTRL_refreshRate_ideal              = 120
    var CTRL_refreshRate_tolerance          = 2
}

group CTRL_MAPPING {
    var CTRL_nRep                           = 0
    var CTRL_dir_lst                        = [0,30,60,90,120,150,180,210,240,270,300,330]
    var CTRL_dir_step_deg                   = 0
    var CTRL_dir_step_clockwise             = 0

    var CTRL_RDP_flag                       = 0
    var CTRL_RDP_ms                         = 0
}

group TRIAL {
    var TRIAL_start                         = 0
    var TRIAL_end                           = 0
    var TRIAL_reactionEvent                 = 0
    var TRIAL_reactionEvent_ts              = 0
    var TRIAL_reactionTrigger               = 0
    var TRIAL_reactionTrigger_ts            = 0
    var TRIAL_RT                            = 0
    var TRIAL_outcome                       = 0
    var TRIAL_type                          = 0
    var TRIAL_align                         = 0
}

group TMP {
    var TMP_dva_pre                         = 0
    var TMP_dva_trial                       = 0
    var TMP_RDPdir                          = 0
    var TMP_normJoyDir                      = 0
    var TMP_accuracy                        = 0
    var TMP_feedback_size                   = 0
    var TMP_score                           = 0 {
        TMP_feedback_size                   = TMP_score*2
    }
    
    // Online Processing
    var TMP_NoStates                        = 0
    var TMP_NoCoherenceStates               = 0
    var TMP_state_min_ms                    = 0
    var TMP_state_max_ms                    = 0
    var TMP_snr_list                        = 0
    var TMP_directionChange_list            = 0
    var TMP_target_ITI_ms                   = 0
    var TMP_target_ban_duration_ms          = 0
    var TMP_sample_counter                  = 0
    var TMP_show_agent                      = 0
    var TMP_flash_flag                      = 0

    // Local
    var pi                                  = 3.14159265359
    var cnt                                 = 0
    var lst_value                           = 0
    var fixationPoint_posY                  = 0
    var fixationPoint_posX                  = 0 
}

group ML {
    var ML_sync                             = 0
}

group RDP {
    var RDP_direction                       = 0 {
        if (TRIAL_start > TRIAL_end) {
            // Restrict to circular space [0:359]
            TMP_RDPdir                          = (RDP_direction + 360) % 360
        }
    }
    var RDP_radius                          = 15
    var RDP_radius_start_area               = 1.2
    var RDP_y                               = 0
    var RDP_x                               = 0
    var RDP_density                         = 2.5
    var RDP_dotsize                         = .1
    var RDP_speed                           = 10
    var RDP_coherence                       = 0
    var RDP_lifetime                        = (1/120) * 25 * 1000
    var RDP_alpha                           = 1
}

group COL {
    var COL_bg_r                            = 0
    var COL_bg_g                            = 0
    var COL_bg_b                            = 0
    var COL_rdp_r                           = 1
    var COL_rdp_g                           = 1
    var COL_rdp_b                           = 1
    var COL_start_area_r                    = 0
    var COL_start_area_g                    = 0
    var COL_start_area_b                    = 0
    var COL_cursor_r                        = 1
    var COL_cursor_g                        = 1
    var COL_cursor_b                        = 1
    var COL_arc_r                           = 1
    var COL_arc_g                           = 0
    var COL_arc_b                           = 0
    var COL_target_r                        = 1
    var COL_target_g                        = 1
    var COL_target_b                        = 1
    var COL_feedback_r                      = 1
    var COL_feedback_g                      = 0
    var COL_feedback_b                      = 0
    var COL_feedback2_r                     = 0
    var COL_feedback2_g                     = 1
    var COL_feedback2_b                     = 0
    var COL_fix_r                           = 1
    var COL_fix_g                           = 1
    var COL_fix_b                           = 1
}

group EYE { // CHANGE VARIABLE NAMES
    var EYE_rightX_raw                      = (float)(0)(persistant = YES)
    var EYE_rightY_raw                      = (float)(0)(persistant = YES)
    var EYE_leftX_raw                       = (float)(0)(persistant = YES)
    var EYE_leftY_raw                       = (float)(0)(persistant = YES)
    var EYE_x_raw                           = (float)(0)(persistant = YES)
    var EYE_y_raw                           = (float)(0)(persistant = YES)
    var EYE_hrefRightX                      = (integer)(0)(persistant = YES)
    var EYE_hrefRightY                      = (integer)(0)(persistant = YES)
    var EYE_hrefLeftX                       = (integer)(0)(persistant = YES)
    var EYE_hrefLeftY                       = (integer)(0)(persistant = YES)
    var EYE_pupilRightX                     = (integer)(0)(persistant = YES)
    var EYE_pupilRightY                     = (integer)(0)(persistant = YES)
    var EYE_pupilLeftX                      = (integer)(0)(persistant = YES)
    var EYE_pupilLeftY                      = (integer)(0)(persistant = YES)
    var EYE_pupilRightSize                  = (integer)(0)(persistant = YES)
    var EYE_pupilLeftSize                   = (integer)(0)(persistant = YES)
    var EYE_sampleTime                      = (integer)0 (persistant = YES)
    var EYE_x_dva                           = (integer)0 (persistant = YES)
    var EYE_y_dva                           = (integer)0 (persistant = YES)
    var EYE_saccade                         = (integer)0 (persistant = YES)

    var local_posX                          = 0 (scope = local)
    var local_posY                          = 0 (scope = local)
}

group IO {
    // Measure manually
    var IO_joystickX_raw_max                = 1023
    var IO_joystickX_raw_min                = 7
    var IO_joystickY_raw_max                = 1023
    var IO_joystickY_raw_min                = 8

    var IO_syncWord                         = 0
    var IO_spikes                           = (float)(0.0)

    var IO_mouse_x                          = 0
    var IO_mouse_y                          = 0
    var IO_mouse_down                       = 0 

    var IO_joystickTrigger                  = 0
    var cancelTrigger                       = 0
    var IO_fixation_flag                    = 0
    var IO_calib_fixation_flag              = 0
    var IO_rewardA                          = 0
    var IO_arc_width                        = 0
    var IO_arc_trigger_min                  = 0
    var IO_arc_trigger_max                  = 0  
    var IO_cursor_x                         = 0
    var IO_cursor_y                         = 0
    var IO_joystickX_raw                    = 0 {
        IO_cursor_x                         = (((IO_joystickX_raw/511.5)-1) * CTRL_Xmax) + RDP_x

        if (CTRL_js_calibration_flag == true) {
            IO_joystickX_raw_max            = max(IO_joystickX_raw_max, IO_joystickX_raw)
            IO_joystickX_raw_min            = min(IO_joystickX_raw_min, IO_joystickX_raw)
        }
    }
    var IO_joystickY_raw                    = 0 {
        IO_cursor_y                         = (((IO_joystickY_raw/511.5)-1) * CTRL_Ymax) + RDP_y

        if (CTRL_js_calibration_flag == true) {
            IO_joystickY_raw_max            = max(IO_joystickY_raw_max, IO_joystickY_raw)
            IO_joystickY_raw_min            = min(IO_joystickY_raw_min, IO_joystickY_raw)
        }
    }
    var IO_joystickStrength                 = 0 {                     
                   
        if (TRIAL_start > TRIAL_end) {
            // Set arc width
            IO_arc_width                    = 180 - (180 * IO_joystickStrength) 

            // Fix minimum arc size
            if (IO_arc_width < CTRL_target_deg) {
                IO_arc_width                = CTRL_target_deg
            } 

            /*
            // Penalise joystick extreme positions
            //if ((IO_joystickStrength > CTRL_joystick_strength_max || IO_joystickStrength < CTRL_joystick_strength_min) && CTRL_joystick_penalty_flag == 0) {
            if ((IO_joystickStrength < CTRL_joystick_strength_min) && CTRL_joystick_penalty_flag == 0 && CTRL_fixation_penalty_flag == 0) {
                CTRL_joystick_penalty_flag  = 1
                CTRL_arc_alpha              = 0
            }

            //if ((IO_joystickStrength <= CTRL_joystick_strength_max && IO_joystickStrength >= CTRL_joystick_strength_min) && CTRL_joystick_penalty_flag) {
            if ((IO_joystickStrength >= CTRL_joystick_strength_min) && CTRL_joystick_penalty_flag && CTRL_fixation_penalty_flag == 0) {
                CTRL_joystick_penalty_flag  = 0
                CTRL_arc_alpha              = 1
            }
            */
        
            // Target
            if (TRIAL_reactionTrigger == 0) {
                CTRL_target_idx             = disc_rand(0,CTRL_nTarget) // Show target?
            }
        }
    }
    var IO_joystickDirection                = 0 {
        if (TRIAL_start > TRIAL_end) {
            // Calculate tracking accuracy
            TMP_normJoyDir                  = (int)(((int)IO_joystickDirection + (180-TMP_RDPdir) + 360) % 360) 
            TMP_accuracy                    = abs(1 - abs(TMP_RDPdir - IO_joystickDirection) / 180)

            /*
            // Calculate reward score
            if (IO_joystickStrength <= 1) {
                TMP_score                   = IO_joystickStrength * TMP_accuracy
            }

            // Cap at maximum
            if (IO_joystickStrength > 1) {
                TMP_score                   = 1 * TMP_accuracy
            }
            */

            // Compute arc trigger boundaries & flag
            IO_arc_trigger_min              = (int)(((int)(TMP_RDPdir - (IO_arc_width/2) + 360) % 360) + ((180-TMP_RDPdir) + 360)) % 360
            IO_arc_trigger_max              = (int)(((int)(TMP_RDPdir + (IO_arc_width/2) + 360) % 360) + ((180-TMP_RDPdir) + 360)) % 360
            CTRL_arc_flag                   = (TMP_normJoyDir >= IO_arc_trigger_min) && (TMP_normJoyDir <= IO_arc_trigger_max)     
        }
    }
}

group Paths {
    var fname_rdp_dir                       = '/Users/cnl/Desktop/Felix/CPR/RDP_direction.txt'
    var fname_rdp_coh                       = '/Users/cnl/Desktop/Felix/CPR/RDP_coherence.txt'
    var fname_ctrl_dur                      = '/Users/cnl/Desktop/Felix/CPR/CTRL_state_duration.txt'
    var fname_counter                       = '/Users/cnl/Desktop/Felix/CPR/counter.txt'
    var fname_agnt_direction                = '/Users/cnl/Desktop/Felix/CPR/AGNT_direction.txt'
    var fname_agnt_strength                 = '/Users/cnl/Desktop/Felix/CPR/AGNT_strength.txt'
    var fname_position_x                    = '/Users/cnl/Desktop/Felix/CPR/x_position.txt'
    var fname_position_y                    = '/Users/cnl/Desktop/Felix/CPR/y_position.txt'
}

group Selection {
    selection SEL_dir (
        values                              = 0,30,60,90,120,150,180,210,240,270,300,330 //cannot use variables here
        selection                           = random_without_replacement
        nsamples                            = 25 //cannot use variables here
        sampling_method                     = cycles
        advance_on_accept                   = YES
        autoreset                           = YES
        )

    selection SEL_snr (
        //values                              = 0, .06, .08, .1067, .1423, .1897, .2530, .3374, .4499, .6
        values                              = .1, .2, .3, .4, .5, .6, .7, .8, .9, 1
        selection                           = random_without_replacement
        nsamples                            = 1000
        sampling_method                     = cycles
        advance_on_accept                   = YES
        autoreset                           = YES
        )

    selection EYE_pos (
        values                              = 1:9
        selection                           = random_without_replacement
        nsamples                            = 1
        sampling_method                     = cycles
        advance_on_accept                   = YES
        autoreset                           = YES
    )
}

group Import {
    var RDP_direction_lst                   = []
    var RDP_coherence_lst                   = []
    var CTRL_state_duration_lst             = []
    var AGNT_direction_lst                  = []
    var AGNT_strength_lst                   = []
    var CTRL_counter                        = []
    var CTRL_position_x                     = []
    var CTRL_position_y                     = []
}

//
// Optimizers
//

filter/file2array RDP_direction_txt (
    output                                  = RDP_direction_lst
    file_name                               = fname_rdp_dir
    version                                 = 1
    )

filter/file2array RDP_coherence_txt (
    output                                  = RDP_coherence_lst
    file_name                               = fname_rdp_coh
    version                                 = 1
    )

filter/file2array CTRL_state_duration_txt (
    output                                  = CTRL_state_duration_lst
    file_name                               = fname_ctrl_dur
    version                                 = 1
    )

filter/file2array CTRL_counter_txt (
    output                                  = CTRL_counter
    file_name                               = fname_counter
    version                                 = 1
    )

filter/file2array x_position_txt (
    output                                  = CTRL_position_x
    file_name                               = fname_position_x
    version                                 = 1
    )


filter/file2array y_position_txt (
    output                                  = CTRL_position_y
    file_name                               = fname_position_y
    version                                 = 1
    )

//
// Sounds
//

wav_file Acquire_sound ('./sounds/acquire.wav')
wav_file Failure_sound ('./sounds/failure2.wav')
wav_file FixBreak_sound ('./sounds/fixbreak.wav')
wav_file Reward_sound ('./sounds/reward.wav')
wav_file End_sound ('./sounds/Defeat Bowser.wav')
wav_file Reward1R_sound ('./sounds/1R.wav')
wav_file Reward1L_sound ('./sounds/1L.wav')
wav_file Reward2R_sound ('./sounds/2R.wav')
wav_file Reward2L_sound ('./sounds/2L.wav')
wav_file Reward3R_sound ('./sounds/3R.wav')
wav_file Reward3L_sound ('./sounds/3L.wav')
wav_file Reward4R_sound ('./sounds/4R.wav')
wav_file Reward4L_sound ('./sounds/4L.wav')
wav_file Reward5R_sound ('./sounds/5R.wav')
wav_file Reward5L_sound ('./sounds/5L.wav')
wav_file Reward6R_sound ('./sounds/6R.wav')
wav_file Reward6L_sound ('./sounds/6L.wav')
wav_file Reward7R_sound ('./sounds/7R.wav')
wav_file Reward7L_sound ('./sounds/7L.wav')
wav_file Reward8R_sound ('./sounds/8R.wav')
wav_file Reward8L_sound ('./sounds/8L.wav')

//
// Stimuli
//

blank_screen Background (
    color                                   = COL_bg_r,COL_bg_g,COL_bg_b
    )

stimulus/advstimulus fixationPoint (
    trigger_width                           = CTRL_fixationWidth_dva
    trigger_watch_x                         = EYE_x_dva
    trigger_watch_y                         = EYE_y_dva
    trigger_flag                            = IO_calib_fixation_flag
    x_size                                  = CTRL_fixationDotSize_dva
    y_size                                  = CTRL_fixationDotSize_dva
    x_position                              = fixationPoint_posX
    y_position                              = fixationPoint_posY
    shape                                   = format("cross")
    color                                   = COL_fix_r,COL_fix_g,COL_fix_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_fixation_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus fixationCross (
    trigger_width                           = CTRL_fixationWidth_dva
    trigger_watch_x                         = EYE_x_dva
    trigger_watch_y                         = EYE_y_dva
    trigger_flag                            = IO_fixation_flag
    x_size                                  = CTRL_fixation_size
    y_size                                  = CTRL_fixation_size
    x_position                              = CTRL_fixation_x
    y_position                              = CTRL_fixation_y
    shape                                   = format("cross")
    color                                   = COL_fix_r,COL_fix_g,COL_fix_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_fixation_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus cursor (
    trigger_width                           = 0
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = 0
    x_size                                  = CTRL_cursor_radius * 2
    y_size                                  = CTRL_cursor_radius * 2
    x_position                              = IO_cursor_x
    y_position                              = IO_cursor_y
    shape                                   = format("circle")
    color                                   = COL_cursor_r,COL_cursor_g,COL_cursor_b
    rotation                                = 0
    alpha_multiplier                        = 1
    version                                 = 1
    autoplay                                = YES
    )

stimulus/r_d_p RDP (
    radius                                  = RDP_radius
    x_position                              = RDP_x
    y_position                              = RDP_y
    dot_density                             = RDP_density
    dot_size                                = RDP_dotsize
    color                                   = COL_rdp_r,COL_rdp_g,COL_rdp_b
    alpha_multiplier                        = RDP_alpha
    direction                               = RDP_direction
    speed                                   = RDP_speed
    coherence                               = RDP_coherence
    lifetime                                = RDP_lifetime
    announce_dots                           = NO
    autoplay                                = YES
    )

stimulus/advstimulus start_area (
    trigger_width                           = CTRL_start_area_size
    trigger_watch_x                         = IO_cursor_x   
    trigger_watch_y                         = IO_cursor_y   
    trigger_flag                            = CTRL_start_area_flag
    x_size                                  = CTRL_start_area_size
    y_size                                  = CTRL_start_area_size
    x_position                              = CTRL_fixation_x
    y_position                              = CTRL_fixation_y
    shape                                   = format("circle")
    color                                   = COL_start_area_r,COL_start_area_g,COL_start_area_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_start_area_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus arc (
    trigger_width                           = 0
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = 0
    x_size                                  = CTRL_arc_size
    y_size                                  = CTRL_arc_size
    x_position                              = CTRL_fixation_x
    y_position                              = CTRL_fixation_y
    shape                                   = format("circle %d", (integer)IO_arc_width)    
    color                                   = COL_arc_r,COL_arc_g,COL_arc_b
    rotation                                = -IO_joystickDirection + (IO_arc_width/2)
    alpha_multiplier                        = CTRL_arc_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus target (
    trigger_width                           = CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                            = CTRL_target_flag
    x_size                                  = CTRL_target_size
    y_size                                  = CTRL_target_size
    x_position                              = CTRL_target_x
    y_position                              = CTRL_target_y
    shape                                   = format("circle")
    color                                   = COL_target_r,COL_target_g,COL_target_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_target_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus target2 (
    trigger_width                           = CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                            = CTRL_target2_flag
    x_size                                  = CTRL_target_size
    y_size                                  = CTRL_target_size
    x_position                              = CTRL_target2_x
    y_position                              = CTRL_target2_y
    shape                                   = format("circle")
    color                                   = COL_target_r,COL_target_g,COL_target_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_target_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus target3 (
    trigger_width                           = CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                            = CTRL_target3_flag
    x_size                                  = CTRL_target_size
    y_size                                  = CTRL_target_size
    x_position                              = CTRL_target3_x
    y_position                              = CTRL_target3_y
    shape                                   = format("circle")
    color                                   = COL_target_r,COL_target_g,COL_target_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_target_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus target4 (
    trigger_width                           = CTRL_target_size
    trigger_watch_x                         = IO_cursor_x
    trigger_watch_y                         = IO_cursor_y
    trigger_flag                            = CTRL_target4_flag
    x_size                                  = CTRL_target_size
    y_size                                  = CTRL_target_size
    x_position                              = CTRL_target4_x
    y_position                              = CTRL_target4_y
    shape                                   = format("circle")
    color                                   = COL_target_r,COL_target_g,COL_target_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_target_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/advstimulus feedback (
    trigger_width                           = 0
    trigger_watch_x                         = 0
    trigger_watch_y                         = 0
    trigger_flag                            = 0
    x_size                                  = TMP_feedback_size
    y_size                                  = TMP_feedback_size
    x_position                              = RDP_x
    y_position                              = RDP_y
    shape                                   = format("circle %d", (integer)360)
    color                                   = COL_feedback_r,COL_feedback_g,COL_feedback_b
    rotation                                = 0
    alpha_multiplier                        = CTRL_feedback_alpha
    version                                 = 1
    autoplay                                = YES
    )

stimulus/circle fix_circ (
    x_size                                  = CTRL_fixationWidth_dva
    y_size                                  = CTRL_fixationWidth_dva
    x_position                              = CTRL_fixation_x
    y_position                              = CTRL_fixation_y
    color                                   = 0,0,0
    rotation                                = 0
    alpha_multiplier                        = 0
    )

stimulus/circle start_circ (
    x_size                                  = CTRL_start_area_size
    y_size                                  = CTRL_start_area_size
    x_position                              = CTRL_fixation_x
    y_position                              = CTRL_fixation_y
    color                                   = 0,0,0
    rotation                                = 0
    alpha_multiplier                        = 0
    )

stimulus/circle rdp_circ (
    x_size                                  = RDP_radius * 2
    y_size                                  = RDP_radius * 2
    x_position                              = RDP_x
    y_position                              = RDP_y
    color                                   = 0,0,0
    rotation                                = 0
    alpha_multiplier                        = 0
    )

stimulus/r_d_p RDP_explore (
    radius                                  = RDP_radius
    x_position                              = IO_mouse_x
    y_position                              = IO_mouse_y
    dot_density                             = RDP_density
    dot_size                                = RDP_dotsize
    color                                   = COL_rdp_r,COL_rdp_g,COL_rdp_b
    alpha_multiplier                        = RDP_alpha
    direction                               = RDP_direction
    speed                                   = RDP_speed
    coherence                               = RDP_coherence
    lifetime                                = RDP_lifetime
    announce_dots                           = NO
    autoplay                                = YES
    )

//
// Filters
//

//
// Optimizers
//

//
// Resources
//

//
// Protocols
//

protocol 'Joystick_calibration' {
    start_device_io (mIO)
    live_queue_stimulus (Background)
    update_stimulus_display ()

    IO_joystickX_raw_max                = 511
    IO_joystickX_raw_min                = 511
    IO_joystickY_raw_max                = 511
    IO_joystickY_raw_min                = 511
    
    CTRL_js_calibration_flag            = true
    COL_bg_r                            = 1
    update_stimulus_display ()

    wait (
        duration                        = 10
        duration_units                  = s
        )

    CTRL_js_calibration_flag            = false
    COL_bg_r                            = 0

    dequeue_stimulus (Background)
    update_stimulus_display ()
    stop_device_io (mIO)
}        

protocol 'Calibration-9p' {
    report ('******** STARTING CALIBRATION ********')
    start_device_io (Eyelink)
    start_device_io (mIO)
    clear_calibration (EyeCalibrator)
    cnt                                 = 0
    CTRL_reward_ml                      = .2
    CTRL_ITI_ms                         = 1000
    CTRL_fixation_duration_ms           = 1000

    trial {
        task 'Calibration System' {

            state BEGIN_STATE_SYSTEM {
                lst_value               = EYE_pos
                fixationPoint_posX      = ((lst_value % 3) - 1) * 5
                fixationPoint_posY      = (floor((lst_value-1)/3) - 1) * 5

                report ('Calibration Trial; Fixation point at x= $fixationPoint_posX , y= $fixationPoint_posY , fixation width = $CTRL_fixationWidth_dva')

                goto (SHOW_CALIBRATION_POINT)
            }
            
            state SHOW_CALIBRATION_POINT {
                live_queue_stimulus (fixationPoint)
                report ($IO_calib_fixation_flag)
                report ('Calibration Trial; Fixation point at x= $fixationPoint_posX , y= $fixationPoint_posY , fixation width = $CTRL_fixationWidth_dva')
                update_stimulus_display ()

                goto (
                    target              = PRE_AQUIRE
                    when                = IO_calib_fixation_flag
                    )
            }
            
            state PRE_AQUIRE {
                report ('Pre Fixation Time ...')
                report ($IO_calib_fixation_flag)

                start_timer (
                    timer               = PreAquireTimer
                    duration            = 250
                    duration_units      = ms
                    )

                goto (
                    target              = SHOW_CALIBRATION_POINT
                    when                = NOT( IO_calib_fixation_flag )
                    )
                timer_expired (
                    target              = CALIBRATION_AQUIRE
                    timer               = PreAquireTimer
                    )
            }
            
            state CALIBRATION_AQUIRE {
                play_sound (Acquire_sound)
                start_timer (
                    timer               = fixation_timer
                    duration            = CTRL_fixation_duration_ms
                    duration_units      = ms
                    )

                begin_calibration_average (EyeCalibrator)
                report ('====== GETTING SAMPLES ======')

                goto (
                    target              = FIXATION_BREAK
                    when                = NOT( IO_calib_fixation_flag )
                    )
                timer_expired (
                    target              = ACCEPT_SAMPLES
                    timer               = fixation_timer
                    )
            }
            
            state ACCEPT_SAMPLES {
                end_calibration_average_and_take_sample (
                    calibrator          = EyeCalibrator
                    calibratable_object = fixationPoint
                    )
                
                cnt                     += 1
                IO_rewardA              = CTRL_reward_ml

                play_sound (Reward_sound)
                dequeue_stimulus (fixationPoint)
                update_stimulus_display ()
                accept_selections (EYE_pos)
                report ('Fixation Maintained -- Trial Accepted !!!')

                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                goto (
                    when                = cnt >= 9
                    target              = EXIT_STATE_SYSTEM
                    )
                goto ('PAUSE')

            }
            
            state FIXATION_BREAK {
                play_sound (Failure_sound)
                end_calibration_average_and_ignore (EyeCalibrator)
                dequeue_stimulus (fixationPoint)
                update_stimulus_display ()
                reject_selections (EYE_pos)
                report ('Fixation Lost -- Trial Rejected.')

                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                goto (
                    when                = cnt >= 9
                    target              = EXIT_STATE_SYSTEM
                    )  

                goto ('PAUSE')
            }

            state PAUSE {
                goto (
                    target              = 'BEGIN_STATE_SYSTEM'
                    when                = timer_expired(ITI_Timer)
                    )
            }
            
            state EXIT_STATE_SYSTEM {
                reset_selection (EYE_pos)
                report ('Starting ITI of 1000 ms')
                wait (
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )
                yield ()
            }
        }            
    }
    update_calibration (EyeCalibrator)
    update_stimulus_display ()
    stop_device_io (Eyelink)
    stop_device_io (mIO)
}


protocol 'RF_exploration' {
    start_device_io (Mouse)
       
    CTRL_reward_ml                          = .2
    CTRL_fixationWidth_dva                  = 3
    CTRL_fixation_size                      = 1
    CTRL_fixation_hold_ms                   = 2000
    CTRL_rectangle_size_x                   = 7
    CTRL_rectangle_size_y                   = .5
    CTRL_dir_step_deg                       = 30
    CTRL_dir_step_clockwise                 = true
    CTRL_ITI_ms                             = 1000
    TRIAL_start                             = 0
    TRIAL_end                               = 0

    trial 'Main Task System' {
        task LOOP {

            state 'Wait for Fixation' {
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()

                goto (
                    target              = 'New trial'
                    when                = IO_fixation_flag
                    ) 
            }

            state 'New trial' {
                // Show RDP
                if (CTRL_RDP_flag == true)  {
                    live_queue_stimulus (RDP_explore)
                }    

                // Show bar
                if (CTRL_RDP_flag == false)  {
                    live_queue_stimulus (rectangle)
                }    

                live_queue_stimulus (fixationCross)
                update_stimulus_display ()
                
                TRIAL_start             += 1
                TRIAL_align             = 1

                if (CTRL_RDP_flag) {
                    TRIAL_type          = 'rdp'
                }

                if (CTRL_RDP_flag == false) {
                    TRIAL_type          = 'bar'
                }

                start_timer (
                    timer               = FixTimer
                    duration            = CTRL_fixation_hold_ms
                    duration_units      = ms
                    )

                goto ('Hold') 
            }

            state 'Hold' {
                goto (
                    target              = 'Reset flag'
                    when                = IO_mouse_down == false && CTRL_mouse_flag == true
                    ) 
                goto (
                    target              = 'Change RDP direction'
                    when                = IO_mouse_down && CTRL_mouse_flag == false
                    ) 
                goto (
                    target              = 'Give reward'
                    when                = timer_expired(FixTimer)
                    ) 
                goto (
                    target              = 'Abort'
                    when                = IO_fixation_flag == false
                    ) 
            }

            state 'Change RDP direction' {
                CTRL_mouse_flag         = true

                if (CTRL_dir_step_clockwise == true) {
                    RDP_direction       = (360 + RDP_direction + CTRL_dir_step_deg) % 360
                }

                if (CTRL_dir_step_clockwise == false) {
                    RDP_direction       = (360 + RDP_direction - CTRL_dir_step_deg) % 360
           
                }

                goto ('Hold') 
            }

            state 'Reset flag' {
                CTRL_mouse_flag         = false

                goto ('Hold')
            }


            state 'Abort' {
                play_sound (Failure_sound)

                TRIAL_outcome           = 'fixation break'

                goto ('End trial')
            }

            state 'Give reward' {
                play_sound (Reward_sound)

                TRIAL_outcome           = 'hit'
                IO_rewardA              = CTRL_reward_ml

                goto ('End trial')
            }

            state 'End trial' {
                dequeue_stimulus (fixationCross)
                dequeue_stimulus (rectangle)
                dequeue_stimulus (RDP_explore)
                update_stimulus_display ()

                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                TRIAL_align             = 0
                TRIAL_end               = TRIAL_start

                report ('==== END OF TRIAL $TRIAL_end ====')
                goto ('ITI')
            }

            state 'ITI' {
                goto (
                    target              = 'Wait for Fixation'
                    when                = timer_expired(ITI_Timer)
                    ) 
            }
        }
    }
}


protocol 'RF_Mapping' { 
    list 'Startup procedures' {
        start_device_io (Eyelink)
        start_device_io (mIO)
        start_device_io (Omniplex)
        
        live_queue_stimulus (Background)
        update_stimulus_display ()

        // Update trial parameters
        fname_position_x                = fname_position_x 
        fname_position_y                = fname_position_y

        IO_syncWord = 0

        wait (
            duration = 1.0
            duration_units = s
            )
        action/omniplex_strobe (
            variable = TRIAL_start
            value = 0
            word_type = 0
            omniplex = Omniplex
            )
        wait (
            duration = 5
            duration_units = s
            )
        action/omniplex_strobe (
            variable = TRIAL_end
            value = 0
            word_type = 15
            omniplex = Omniplex
            )
        wait (
            duration = 1.0
            duration_units = s
            )
    }
    ML_sync                                 = 1
    INFO_task                               = "RF_mapping"

    CTRL_reward_ml                          = .5
    CTRL_NoStimuli                          = 1500
    CTRL_fixationWidth_dva                  = 3
    CTRL_fixation_size                      = 1
    CTRL_fixation_hold_ms                   = 1000
    CTRL_ITI_ms                             = 2000
    CTRL_RDP_ms                             = 100
    CTRL_RDP_flag                           = 0

    RDP_radius                              = 2
    RDP_coherence                           = 0
    RDP_density                             = 2
    RDP_dotsize                             = .18

    TRIAL_start                             = 0
    TRIAL_end                               = 0
    
    INFO_StateCounter                       = 0
    INFO_HitCounter                         = 0
    INFO_ErrorCounter                       = 0
    ML_sync                                 = 0

    trial 'Main Task System' {
        task LOOP {

            state 'Wait for Fixation' {
                live_queue_stimulus (fix_circ)
                live_queue_stimulus (start_circ)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()

                goto (
                    target              = 'Pre Trial Fixation'
                    when                = IO_fixation_flag
                    ) 
            }

            state 'Pre Trial Fixation' {
                start_timer (
                    timer               = PreTrialFix
                    duration            = 200
                    duration_units      = ms
                    )

                goto (
                    target              = 'New trial'
                    when                = IO_fixation_flag && timer_expired(PreTrialFix)
                    ) 
                goto (
                    target              = 'Wait for Fixation'
                    when                = IO_fixation_flag == false
                    ) 
            }

            state 'New trial' {
                ML_sync                 = 0

                action/omniplex_strobe (
                    variable            = TRIAL_start
                    value               = TRIAL_start +1
                    word_type           = 0
                    omniplex            = Omniplex
                    )

                TRIAL_align             = 1
                TRIAL_reactionTrigger_ts = now()
                RDP_alpha               = 0
                INFO_task               = "RF_mapping"

                start_timer (
                    timer               = FixTimer
                    duration            = CTRL_fixation_hold_ms
                    duration_units      = ms
                    )

                start_timer (
                    timer               = RDP_Timer
                    duration            = 200
                    duration_units      = ms
                    )

                update_stimulus_display ()

                goto ('Hold') 
            }

            state 'Hold' {
                goto (
                    target              = 'Hit'
                    when                = timer_expired(FixTimer)
                    ) 
                goto (
                    target              = 'Abort'
                    when                = IO_fixation_flag == false
                    ) 
                goto (
                    target              = 'Show RDP'
                    when                = timer_expired(RDP_Timer) && CTRL_RDP_flag == 0
                    )
                goto (
                    target              = 'Change RDP'
                    when                = timer_expired(RDP_Timer) && CTRL_RDP_flag == 1
                    )
            }

            state 'Show RDP' {
                live_queue_stimulus (fix_circ)
                live_queue_stimulus (start_circ)
                live_queue_stimulus (RDP)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()

                RDP_x                   = CTRL_position_x[INFO_StateCounter]
                RDP_y                   = CTRL_position_y[INFO_StateCounter]
                TRIAL_type              = format("X%dY%d", (integer)RDP_x, (integer)RDP_y)

                RDP_alpha               = 1
                CTRL_RDP_flag           = 1

                start_timer (
                    timer               = RDP_Timer
                    duration            = CTRL_RDP_ms
                    duration_units      = ms
                    ) 

                goto('Hold')
            }

            state 'Change RDP' {         

                INFO_StateCounter       += 1
                RDP_x                   = CTRL_position_x[INFO_StateCounter]
                RDP_y                   = CTRL_position_y[INFO_StateCounter]
                TRIAL_type              = format("X%dY%d", (integer)RDP_x, (integer)RDP_y)

                update_stimulus_display ()

                start_timer (
                    timer               = RDP_Timer
                    duration            = CTRL_RDP_ms
                    duration_units      = ms
                    ) 

                goto('Hold')
            }

            state 'Abort' {
                
                play_sound (FixBreak_sound)

                TRIAL_outcome           = "fixation break"
                INFO_ErrorCounter       = INFO_ErrorCounter + 1
                TRIAL_RT                = (now() - TRIAL_reactionTrigger_ts)/1000
                               
                COL_fix_r               = 1
                COL_fix_g               = 0
                COL_fix_b               = 0
                CTRL_fixation_size      = 1.5

                wait (
                    duration            = 333
                    duration_units      = ms
                    )

                report ('FIXATION BREAK')
                report ('FixTime: $TRIAL_RT')

                goto ('End trial')
            }

            state 'Hit' {
                TRIAL_outcome           = "hit"
                INFO_StateCounter       += 1
                INFO_HitCounter         += 1
                TRIAL_RT                = CTRL_fixation_hold_ms

                play_sound (Reward_sound)
                report ('Hit')
                report ('FixTime: $TRIAL_RT')

                goto ('Give reward')
            }            

            state 'Give reward' {

                report ('=REW: $CTRL_reward_ml ml')

                INFO_Juice_ml           += CTRL_reward_ml
                IO_rewardA              = CTRL_reward_ml

                goto ('End trial')
            }

            state 'End trial' {
                dequeue_stimulus (fix_circ)
                dequeue_stimulus (start_circ)
                dequeue_stimulus (RDP)
                dequeue_stimulus (fixationCross)
                update_stimulus_display ()

                COL_fix_r               = 1
                COL_fix_g               = 1
                COL_fix_b               = 1
                CTRL_RDP_flag           = 0
                CTRL_fixation_size      = 1
                TRIAL_align             = 0

                action/omniplex_strobe (
                    variable            = TRIAL_end
                    value               = TRIAL_start
                    word_type           = 15
                    omniplex            = Omniplex
                    )   

                ML_sync                 = 0

                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                report ('==== END OF TRIAL $TRIAL_end ====')

                goto (
                    target              = 'End paradigm'
                    when                = INFO_HitCounter == CTRL_NoStimuli
                    ) 
                goto ('ITI') 

            }

            state 'ITI' {
                goto (
                    target              = 'Wait for Fixation'
                    when                = timer_expired(ITI_Timer)
                    ) 
            }

            state 'End paradigm' {
                update_stimulus_display ()
                report ('==== ENDING PARADIGM ====')
                yield ()
            }
        }
    }

        list 'Stopping procedures' {
        IO_syncWord = 0
        wait (
            duration = 1.0
            duration_units = s
            )
        stop_device_io (Eyelink)
        stop_device_io (mIO)
        stop_device_io (Omniplex)

        ML_sync = 0
        dequeue_stimulus (Background)
        update_stimulus_display ()
    }
}

protocol 'RF_Tuning' {   
    list 'Startup procedures' {
        start_device_io (Eyelink)
        start_device_io (mIO)
        start_device_io (Omniplex)
        
        live_queue_stimulus (Background)
        update_stimulus_display ()

        IO_syncWord = 0

        wait (
            duration = 1.0
            duration_units = s
            )
        action/omniplex_strobe (
            variable = TRIAL_start
            value = 0
            word_type = 0
            omniplex = Omniplex
            )
        wait (
            duration = 5
            duration_units = s
            )
        action/omniplex_strobe (
            variable = TRIAL_end
            value = 0
            word_type = 15
            omniplex = Omniplex
            )
        wait (
            duration = 1.0
            duration_units = s
            )
    }

    ML_sync                                 = 1
    INFO_task                               = "RF_tuning"
    
    CTRL_reward_ml                          = .5
    CTRL_NoStimuli                          = 300
    CTRL_fixationWidth_dva                  = 3
    CTRL_fixation_size                      = 1
    CTRL_fixation_hold_ms                   = 1000
    CTRL_ITI_ms                             = 2000
    CTRL_RDP_ms                             = 250
    CTRL_RDP_flag                           = 0

    RDP_radius                              = 30
    RDP_coherence                           = 1
    RDP_density                             = 2
    RDP_dotsize                             = .18
    RDP_x                                   = 0
    RDP_y                                   = 0

    CTRL_start_area_size                    = 10
    CTRL_start_area_alpha                   = 1 
       
    COL_start_area_r                        = 0
    COL_start_area_g                        = 0
    COL_start_area_b                        = 0

    TRIAL_start                             = 0
    TRIAL_end                               = 0
    
    INFO_HitCounter                         = 0
    INFO_ErrorCounter                       = 0
    ML_sync                                 = 0


    trial 'Main Task System' {
        task LOOP {

            state 'Wait for Fixation' {
                live_queue_stimulus (fix_circ)
                live_queue_stimulus (start_circ)
                live_queue_stimulus (start_area)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()

                goto (
                    target              = 'Pre Trial Fixation'
                    when                = IO_fixation_flag
                    ) 
            }

            state 'Pre Trial Fixation' {
                start_timer (
                    timer               = PreTrialFix
                    duration            = 200
                    duration_units      = ms
                    )

                goto (
                    target              = 'New trial'
                    when                = IO_fixation_flag && timer_expired(PreTrialFix)
                    ) 
                goto (
                    target              = 'Wait for Fixation'
                    when                = IO_fixation_flag == false
                    ) 
            }

            state 'New trial' {
                ML_sync                 = 1

                action/omniplex_strobe (
                    variable            = TRIAL_start
                    value               = TRIAL_start +1
                    word_type           = 0
                    omniplex            = Omniplex
                    )

                TRIAL_reactionTrigger_ts = now()
                RDP_alpha               = 0
                INFO_task               = "RF_tuning"

                start_timer (
                    timer               = FixTimer
                    duration            = CTRL_fixation_hold_ms
                    duration_units      = ms
                    )

                start_timer (
                    timer               = RDP_Timer
                    duration            = CTRL_RDP_ms
                    duration_units      = ms
                    )

                update_stimulus_display ()

                goto ('Hold') 
            }

            state 'Hold' {
                goto (
                    target              = 'Hit'
                    when                = timer_expired(FixTimer)
                    ) 
                goto (
                    target              = 'Abort'
                    when                = IO_fixation_flag == false
                    ) 
                goto (
                    target              = 'Show RDP'
                    when                = timer_expired(RDP_Timer) && CTRL_RDP_flag == 0
                    )
                goto (
                    target              = 'Change RDP'
                    when                = timer_expired(RDP_Timer) && CTRL_RDP_flag == 1
                    )
            }

            state 'Show RDP' {
                live_queue_stimulus (fix_circ)
                live_queue_stimulus (start_circ)
                live_queue_stimulus (RDP)
                live_queue_stimulus (start_area)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()

                RDP_direction           = SEL_dir
                RDP_alpha               = 1
                CTRL_RDP_flag           = 1

                start_timer (
                    timer               = RDP_Timer
                    duration            = CTRL_RDP_ms
                    duration_units      = ms
                    ) 

                goto('Hold')
            }

            state 'Change RDP' {         

                accept_selections (SEL_dir)

                RDP_direction           = SEL_dir

                update_stimulus_display ()

                start_timer (
                    timer               = RDP_Timer
                    duration            = CTRL_RDP_ms
                    duration_units      = ms
                    ) 

                goto('Hold')
            }

            state 'Abort' {
                
                play_sound (FixBreak_sound)
                reject_selections (SEL_dir)

                TRIAL_outcome           = "fixation break"
                INFO_ErrorCounter       = INFO_ErrorCounter + 1
                TRIAL_RT                = (now() - TRIAL_reactionTrigger_ts)/1000
                               
                COL_fix_r               = 1
                COL_fix_g               = 0
                COL_fix_b               = 0
                CTRL_fixation_size      = 1.5

                wait (
                    duration            = 333
                    duration_units      = ms
                    )

                report ('FIXATION BREAK')
                report ('FixTime: $TRIAL_RT')

                goto ('End trial')
            }

            state 'Hit' {
                TRIAL_outcome           = "hit"
                INFO_HitCounter         = INFO_HitCounter + 1
                TRIAL_RT                = CTRL_fixation_hold_ms

                play_sound (Reward_sound)
                report ('Hit')
                report ('FixTime: $TRIAL_RT')

                goto ('Give reward')
            }            

            state 'Give reward' {

                report ('=REW: $CTRL_reward_ml ml')

                INFO_Juice_ml           += CTRL_reward_ml
                IO_rewardA              = CTRL_reward_ml

                goto ('End trial')
            }

            state 'End trial' {
                dequeue_stimulus (fix_circ)
                dequeue_stimulus (start_circ)
                dequeue_stimulus (RDP)
                dequeue_stimulus (start_area)
                dequeue_stimulus (fixationCross)
                update_stimulus_display ()

                COL_fix_r               = 1
                COL_fix_g               = 1
                COL_fix_b               = 1
                CTRL_RDP_flag           = 0
                CTRL_fixation_size      = 1

                action/omniplex_strobe (
                    variable            = TRIAL_end
                    value               = TRIAL_start
                    word_type           = 15
                    omniplex            = Omniplex
                    )   

                ML_sync                 = 0

                start_timer (
                    timer               = ITI_Timer
                    duration            = CTRL_ITI_ms
                    duration_units      = ms
                    )

                report ('==== END OF TRIAL $TRIAL_end ====')

                goto (
                    target              = 'End paradigm'
                    when                = INFO_HitCounter == CTRL_NoStimuli
                    ) 
                goto ('ITI') 

            }

            state 'ITI' {
                goto (
                    target              = 'Wait for Fixation'
                    when                = timer_expired(ITI_Timer)
                    ) 
            }

            state 'End paradigm' {
                update_stimulus_display ()
                report ('==== ENDING PARADIGM ====')
                yield ()
            }
        }
    }
        list 'Stopping procedures' {
        IO_syncWord = 0
        wait (
            duration = 1.0
            duration_units = s
            )
        stop_device_io (Eyelink)
        stop_device_io (mIO)
        stop_device_io (Omniplex)

        ML_sync = 0
        dequeue_stimulus (Background)
        update_stimulus_display ()
    }
}

/*
protocol 'Coherence_mapping' {

}
*/

protocol 'CPR_solo' {
    report ('Hello! Starting Experiment...')

    list 'Startup procedures' {
        start_device_io (Eyelink)
        start_device_io (mIO)
        start_device_io (Omniplex)

        live_queue_stimulus (Background)
        update_stimulus_display ()
        
        IO_syncWord = 0

        wait (
            duration = 1.0
            duration_units = s
            )
        action/omniplex_strobe (
            variable = TRIAL_start
            value = 0
            word_type = 0
            omniplex = Omniplex
            )
        wait (
            duration = 5
            duration_units = s
            )
        action/omniplex_strobe (
            variable = TRIAL_end
            value = 0
            word_type = 15
            omniplex = Omniplex
            )
        wait (
            duration = 1.0
            duration_units = s
            )
    }

    // Set desired parameters
    ML_sync                                     = 1
    INFO_task                                   = "CPR_solo_stepfunction_neutral"
    CTRL_reward_ml                              = 1 // Post-cycle reward
    CTRL_reward_max_ml                          = 1 // Max reward volume
    CTRL_reward_min_ml                          = .1 // Min reward volume
    CTRL_reward_power                           = 2 // Exponential scaling
    CTRL_reward_penalty_ml                      = .2 // Negative reward in cumulative setting for missed targets
    CTRL_direct_reward_flag                     = true

    CTRL_NoTargets                              = 100000
    CTRL_NoStates                               = 10
    CTRL_NoCoherenceStates                      = 5 
    CTRL_state_min_ms                           = 1250 
    CTRL_state_max_ms                           = 2500
    CTRL_nTarget 								= 99 // 1%
    CTRL_cpr_treshold                           = .2 // Initial threshold to start cycle
    
    CTRL_arc_alpha                              = 1
    CTRL_arc_size                               = 2
    
    CTRL_start_area_size                        = 2
    CTRL_start_area_alpha                       = 1
    
    CTRL_target_size                            = .3
    CTRL_target_alpha                           = 1
    //CTRL_target_deg                             = 2 * (asin( (CTRL_target_size/2) / ((CTRL_start_area_size/2) + (CTRL_target_size/2)) ) * (180/pi))
    CTRL_target_deg                             = 30
    CTRL_target_offset                          = .8
    CTRL_target_duration_ms                     = 50
    CTRL_target_ITI_ms                          = 300
    CTRL_target_ban_duration_ms                 = 300

    CTRL_ITI_ms                                 = 2000
    CTRL_minFixBreak_duration_ms                = 300

    COL_start_area_r                            = .2 // Grey: 11.93cd/m^2 -- Red: 11.69cd/m^2
    COL_start_area_g                            = .2
    COL_start_area_b                            = .2

    RDP_radius                                  = 12
    RDP_y                                       = 3
    RDP_x                                       = -15
    RDP_density                                 = 2
    RDP_dotsize                                 = 0.18
    
    TMP_dva_pre                                 = 1.5
    TMP_dva_trial                               = 4

    // Reset counters
    TRIAL_start                                 = 0
    TRIAL_end                                   = 0
    INFO_StateCounter                           = 0
    INFO_CoherenceStateCounter                  = 0
    INFO_TargetCounter                          = 0
    INFO_HitCounter                             = 0
    INFO_ErrorCounter                           = 0
    INFO_FixBreak_Counter                       = 0
    INFO_Juice_ml                               = 0

    // Set TMP variables for online processing
    TMP_NoStates                                = CTRL_NoStates
    TMP_NoCoherenceStates                       = CTRL_NoCoherenceStates
    TMP_state_min_ms                            = CTRL_state_min_ms
    TMP_state_max_ms                            = CTRL_state_max_ms
    TMP_snr_list                                = CTRL_snr_list
    TMP_directionChange_list                    = CTRL_directionChange_list
    TMP_target_ITI_ms                           = CTRL_target_ITI_ms
    TMP_target_ban_duration_ms                  = CTRL_target_ban_duration_ms
    TMP_show_agent                              = CTRL_show_agent
    ML_sync                                     = 0

    wait (
        duration                                = 200
        duration_units                          = ms
        )

    // Update trial parameters
    fname_rdp_dir                               = fname_rdp_dir 
    fname_rdp_coh                               = fname_rdp_coh
    fname_ctrl_dur                              = fname_ctrl_dur
    fname_counter                               = fname_counter

    // Initialise timer
    start_timer (
        timer                                   = TargetDurationTimer
        duration                                = 1
        duration_units                          = ms
    )

    start_timer (
        timer                                   = Target_ITI_Timer
        duration                                = 1
        duration_units                          = ms
    )

    cancelTrigger                               = false
    schedule (
        delay                                   = 0 
        duration                                = 10000
        repeats                                 = -999
        cancel                                  = cancelTrigger
        ) {
            IO_joystickTrigger                  = true
    }

    trial 'Trial Structure' {
        task LOOP {

            state REFRESH_RATE_CHECK {
                report ('Current refresh rate: $(refresh_rate()) Hz')
                report ('Ideal refresh rate: ${CTRL_refreshRate_ideal} Hz')
                report ('If the two values differ by more than ${CTRL_refreshRate_tolerance} Hz, the experiment will not be started.')
                
                goto (
                    target = 'Wait for Joystick Reset'
                    when = CTRL_refreshRate_ideal == 0 || (CTRL_refreshRate_ideal != 0 && (CTRL_refreshRate_ideal+CTRL_refreshRate_tolerance >= refresh_rate() && CTRL_refreshRate_ideal-CTRL_refreshRate_tolerance <= refresh_rate()))
                    )
            }

            state 'Wait for Joystick Reset' {
                goto (
                    target                      = 'Wait for Joystick Movement'
                    when                        = (IO_joystickStrength <= CTRL_cpr_treshold) 
                    )
            }
            
            state 'Wait for Joystick Movement' {
                live_queue_stimulus (fix_circ)
                live_queue_stimulus (start_circ)
                live_queue_stimulus (start_area)
                live_queue_stimulus (fixationCross)
                update_stimulus_display ()

                COL_fix_r                       = 1
                COL_fix_g                       = 1
                COL_fix_b                       = 1
                CTRL_fixation_size              = .5
                CTRL_fixationWidth_dva          = TMP_dva_pre        

                goto (
                    target                      = 'Pre-Trial Fixation'
                    when                        = (IO_joystickStrength > CTRL_cpr_treshold) && IO_fixation_flag
                    )
            }

            state 'Pre-Trial Fixation' {
                start_timer (
                timer                       = PreTrialFix
                duration                    = 250
                duration_units              = ms
                )

                goto (
                    target                      = 'Wait for Joystick Movement'
                    when                        = (IO_joystickStrength < CTRL_cpr_treshold) || IO_fixation_flag == 0
                    )

                goto (
                    target                      = 'New Trial'
                    when                        = (IO_joystickStrength > CTRL_cpr_treshold) && IO_fixation_flag && timer_expired(PreTrialFix)
                    )
            }

            state 'New Trial' {      
                CTRL_fixationWidth_dva          = TMP_dva_trial
                ML_sync                         = 1 // Matlab sync event

                action/omniplex_strobe (
                    variable                    = TRIAL_start
                    value                       = TRIAL_start +1
                    word_type                   = 0
                    omniplex                    = Omniplex
                    )

                TRIAL_align                     = 1 // Trial align event
                INFO_task                       = "CPR_solo_stepfunction_neutral"
                TMP_sample_counter              = 0 // Reset variables
                INFO_StateCounter               = 0 
                INFO_CoherenceStateCounter      = 0                
                CTRL_reward_cum_ml              = 0     
                COL_feedback_r                  = 1
                COL_feedback_g                  = 0
                COL_feedback_b                  = 0
                COL_fix_r                       = 1
                COL_fix_g                       = 1
                COL_fix_b                       = 1
                CTRL_fixation_size              = .5
                CTRL_fixation_penalty_flag      = 0

                // Set TMP variables for online processing
                TMP_NoStates                    = CTRL_NoStates
                TMP_NoCoherenceStates           = CTRL_NoCoherenceStates
                TMP_state_min_ms                = CTRL_state_min_ms
                TMP_state_max_ms                = CTRL_state_max_ms
                TMP_snr_list                    = CTRL_snr_list
                TMP_directionChange_list        = CTRL_directionChange_list
                TMP_target_ITI_ms               = CTRL_target_ITI_ms
                TMP_target_ban_duration_ms      = CTRL_target_ban_duration_ms
                TMP_show_agent                  = CTRL_show_agent
                ML_sync                         = 0 // Stop sync

                update_stimulus_display ()

                report ('===== TRIAL $TRIAL_start STARTS =====')
                goto ('Show Stimuli')
            }

            state 'Show Stimuli' {
                live_queue_stimulus (start_circ)
                live_queue_stimulus (rdp_circ)
                live_queue_stimulus (RDP)
                live_queue_stimulus (start_area)
                live_queue_stimulus (arc)
                live_queue_stimulus (fixationCross)

                update_stimulus_display ()   

                goto ('Dequeue Target')
            }

            state 'Dequeue Target' {
                //Remove target from screen
                dequeue_stimulus (target)
                update_stimulus_display ()
                
                // Reset flag
                TRIAL_reactionTrigger           = 0
                CTRL_hit_flag                   = 0
                CTRL_miss_flag                  = 0

                goto ('Check Counters')
            }

            state 'Check Counters' {
                goto (
                    target                      = 'End Trial'
                    when                        = ((INFO_StateCounter >= CTRL_NoStates) && timer_expired(StateDurationTimer)) || (INFO_TargetCounter >= CTRL_NoTargets)
                    )
                goto (
                    target                      = 'Update Stimuli'
                    when                        =  timer_expired(StateDurationTimer) == 0
                    )
                goto (
                    target                      = 'Set up state'
                    when                        =  timer_expired(StateDurationTimer) 
                    )
            }

            state 'Set up state' {
                // Determine state parameters
                CTRL_state_duration_ms          = CTRL_state_duration_lst[INFO_StateCounter] // Duration of state
                RDP_direction                   = RDP_direction_lst[INFO_StateCounter] // Stimulus direction of state
                RDP_coherence                   = RDP_coherence_lst[INFO_StateCounter] // Stimulus coherence of state
                INFO_StateCounter               += 1
                
                // Keep track of number of states with same coherence level
                if (INFO_CoherenceStateCounter >= CTRL_NoCoherenceStates) {
                    INFO_CoherenceStateCounter  = 0
                }
                INFO_CoherenceStateCounter      = INFO_CoherenceStateCounter + 1
                TRIAL_type                      = format("Coh%d", (float)RDP_coherence)

                start_timer (
                    timer                       = StateDurationTimer
                    duration                    = CTRL_state_duration_ms
                    duration_units              = ms
                    )

                // Block target appearance in time window after state onset
                start_timer (
                    timer                       = TargetBanTimer
                    duration                    = CTRL_target_ban_duration_ms
                    duration_units              = ms
                    )

                report ('--- State $INFO_StateCounter ---')
                          
                goto ('Update Stimuli')
            }


            state 'Update Stimuli' { 
                goto (                    
                    target                      = 'Fixation break detected'
                    when                        = (IO_fixation_flag == 0 && CTRL_fixation_break_flag == 0) 
                    )
                goto (                    
                    target                      = 'Reset CTRL_fixation_break_flag'
                    when                        = IO_fixation_flag && CTRL_fixation_break_flag && timer_expired(MinFixationBreakTimer) == 0 && CTRL_fixation_penalty_flag == 0
                    )                
                goto (                    
                    target                      = 'Fixation break penalty'
                    when                        = (IO_fixation_flag == 0 && timer_expired(MinFixationBreakTimer) && CTRL_fixation_break_flag && CTRL_fixation_penalty_flag == 0)
                    )
                goto (
                    target                      = 'Dequeue Target'
                    when                        = CTRL_hit_flag && TRIAL_reactionTrigger && timer_expired(TargetDurationTimer)
                    )
                goto (
                    target                      = 'Target presentation'
                    when                        = CTRL_target_idx == 0 && TRIAL_reactionTrigger == 0 && timer_expired(Target_ITI_Timer) && timer_expired(TargetBanTimer)
                    ) 
                goto (
                    target                      = 'Hit'
                    when                        = CTRL_arc_flag && TRIAL_reactionTrigger && (CTRL_hit_flag + CTRL_miss_flag) == 0 && timer_expired(TargetDurationTimer) == 0 && CTRL_joystick_penalty_flag == 0 && CTRL_fixation_penalty_flag == 0
                    )  
                goto (
                    target                      = 'Miss'
                    when                        = timer_expired(TargetDurationTimer) && TRIAL_reactionTrigger && (CTRL_hit_flag + CTRL_miss_flag) == 0
                    )              
                goto (
                    target                      = 'Check Counters'
                    when                        = timer_expired(StateDurationTimer) && TRIAL_reactionTrigger == 0
                    )
            }

            state 'Fixation break detected' {
                CTRL_fixation_break_flag        = 1

                start_timer (
                    timer                       = MinFixationBreakTimer
                    duration                    = CTRL_minFixBreak_duration_ms
                    duration_units              = ms
                    )
                    
                report ('Initial Fixation Break')
                
                goto ('Update Stimuli')
            }

            state 'Reset CTRL_fixation_break_flag' {
                    CTRL_fixation_break_flag        = 0
                    report ('Fixation reset')
                    goto ('Update Stimuli')
            }

            state 'Fixation break penalty' {

                CTRL_fixation_penalty_flag      = 1
                TRIAL_outcome                   = 'FixationBreak'
                INFO_FixBreak_Counter           += 1
                COL_fix_r                       = 1
                COL_fix_g                       = .65
                COL_fix_b                       = 0
                CTRL_fixation_size              = 1

                play_sound('FixBreak_sound')
                report ('Fixation Break Penalty')

                wait (
                    duration                    = 333
                    duration_units              = ms
                    )

                goto ('End Trial')
            }

            state 'Target presentation' {
                // Target coordinates according to RDP direction
                CTRL_target_x                   = CTRL_fixation_x + (sin((RDP_direction)*(pi/180)) * (CTRL_target_offset)) 
                CTRL_target_y                   = CTRL_fixation_y + (cos((RDP_direction)*(pi/180)) * (CTRL_target_offset)) 

                live_queue_stimulus (target)
                update_stimulus_display ()

                TRIAL_reactionTrigger           = 1
                INFO_TargetCounter              += 1

                start_timer (
                    timer                       = TargetDurationTimer
                    duration                    = CTRL_target_duration_ms
                    duration_units              = ms
                    )

                // Block target appearance for given interval
                start_timer (
                    timer                       = Target_ITI_Timer
                    duration                    = (CTRL_target_duration_ms + CTRL_target_ITI_ms)
                    duration_units              = ms
                    )

                report ('--- SHOW TARGET $INFO_TargetCounter ---')
                goto ('Update Stimuli')
            }

            state 'Hit' {
                // Set flags and add to counters
                TRIAL_outcome                   = "hit"
                CTRL_hit_flag                   = 1
                INFO_HitCounter                 += 1

                if (IO_arc_width >= CTRL_target_deg) {
                    CTRL_target_reward_ml           = (pow(IO_joystickStrength,CTRL_reward_power) * (CTRL_reward_max_ml - CTRL_reward_min_ml)) + CTRL_reward_min_ml
                } 

                if (IO_arc_width < CTRL_target_deg) {
                    CTRL_target_reward_ml           = (pow(1,CTRL_reward_power) * (CTRL_reward_max_ml - CTRL_reward_min_ml)) + CTRL_reward_min_ml
                } 

                CTRL_reward_cum_ml              += CTRL_target_reward_ml // Cumulative sum

                // Auditory feedback
                // PRESENT BOTH SPEAKERS - SETUP INDEPENDENT
                if (IO_joystickStrength > .875) {
                    play_sound (Reward8R_sound)
                    play_sound (Reward8L_sound)
                }

                if (IO_joystickStrength > .75 && IO_joystickStrength <= .875) {
                    play_sound (Reward7R_sound)
                    play_sound (Reward7L_sound)
                }

                if (IO_joystickStrength > .625 && IO_joystickStrength <= .75) {
                    play_sound (Reward6R_sound)
                    play_sound (Reward6L_sound)
                }

                if (IO_joystickStrength > .5 && IO_joystickStrength <= .625) {
                    play_sound (Reward5R_sound)
                    play_sound (Reward5L_sound)
                }

                if (IO_joystickStrength > .375 && IO_joystickStrength <= .5) {
                    play_sound (Reward4R_sound)
                    play_sound (Reward4L_sound)
                }

                if (IO_joystickStrength > .25 && IO_joystickStrength <= .375) {
                    play_sound (Reward3R_sound)
                    play_sound (Reward3L_sound)
                }

                if (IO_joystickStrength > .125 && IO_joystickStrength <= .25) {
                    play_sound (Reward2R_sound)
                    play_sound (Reward2L_sound)
                }

                if (IO_joystickStrength <= .125) {
                    play_sound (Reward1R_sound)
                    play_sound (Reward1L_sound)
                }

                report ('--- OUTCOME: Hit ---')

                goto (
                    target                      = 'Give reward'
                    when                        = CTRL_direct_reward_flag == true
                    )
                goto (
                    target                      = 'Update Stimuli'
                    when                        = CTRL_direct_reward_flag == false
                    )
            }
    
            state 'Miss' {
                play_sound (Failure_sound)

                // Set flags and add to counters
                TRIAL_outcome                   = "miss"
                CTRL_miss_flag                  = 1
                INFO_ErrorCounter               += 1
                CTRL_reward_cum_ml              -= CTRL_reward_penalty_ml // Penalty

                if (CTRL_reward_cum_ml < 0) {
                    CTRL_reward_cum_ml          = 0
                }

                report ('--- OUTCOME: Miss ---')
                update_stimulus_display ()

                goto (
                    target                      = 'End Trial'
                    when                        = ((INFO_StateCounter >= CTRL_NoStates) && timer_expired(StateDurationTimer)) || (INFO_TargetCounter >= CTRL_NoTargets)
                    )
                goto ('Dequeue Target')
            }  

            state 'End Trial' {
                dequeue_stimulus (fix_circ)
                dequeue_stimulus (start_circ)
                dequeue_stimulus (rdp_circ)
                dequeue_stimulus (RDP)
                dequeue_stimulus (start_area)
                dequeue_stimulus (arc)
                dequeue_stimulus (fixationCross)
                dequeue_stimulus (target)

                TRIAL_align                     = 0

                action/omniplex_strobe (
                    variable                    = TRIAL_end
                    value                       = TRIAL_start
                    word_type                   = 15
                    omniplex                    = Omniplex
                    )   

                start_timer (
                    timer                       = ITI_Timer
                    duration                    = CTRL_ITI_ms
                    duration_units              = ms
                    )

                update_stimulus_display ()
                report ('===== TRIAL $TRIAL_end ENDS =====')
                goto ('Give reward')
            }

            state 'Give reward' {

                // Direct reward: Target-wise reward application
                if (CTRL_direct_reward_flag == true && CTRL_hit_flag == 1) {
                    INFO_Juice_ml               += CTRL_target_reward_ml
                    IO_rewardA                  = CTRL_target_reward_ml
                                    
                    report ('REWARD [ml]: $IO_rewardA')
                }

                // Direct reward: Extra for completing full cycle without fix break
                if (CTRL_direct_reward_flag == true && CTRL_fixation_penalty_flag == 0 && TRIAL_start == TRIAL_end) {

                    wait (
                        duration                = 333
                        duration_units          = ms
                    )

                    INFO_Juice_ml               += CTRL_reward_ml
                    IO_rewardA                  = CTRL_reward_ml
                    
                    report ('EXTRA REWARD [ml]: $IO_rewardA')
                }

                // Cumulative reward
                if (CTRL_direct_reward_flag == false) {
                    if (CTRL_fixation_penalty_flag == 1) {
                        CTRL_reward_cum_ml      = 0
                    }

                    if (CTRL_fixation_penalty_flag == 0 && CTRL_reward_cum_ml < CTRL_reward_ml) {
                        CTRL_reward_cum_ml      = CTRL_reward_ml
                        report ('EXTRA REWARD [ml]: $IO_rewardA')
                    }

                	INFO_Juice_ml               += CTRL_reward_cum_ml
                    IO_rewardA                  = CTRL_reward_cum_ml
                                    
                    report ('REWARD [ml]: $IO_rewardA')
                }

                goto (
                    target                      = 'Update Stimuli'
                    when                        = CTRL_direct_reward_flag == true && TRIAL_start != TRIAL_end
                    )

                goto (
                    target                      = 'ITI'
                    when                        = CTRL_direct_reward_flag == false || TRIAL_start == TRIAL_end
                    )
            }

            state 'ITI' {
                // Wait for update to be finished                
                while (CTRL_counter[0] != TRIAL_start) {
                    wait (
                        duration                = 100
                        duration_units          = ms
                        )
                    
                    // Update trial parameters
                    fname_rdp_dir               = fname_rdp_dir 
                    fname_rdp_coh               = fname_rdp_coh
                    fname_ctrl_dur              = fname_ctrl_dur
                    fname_counter               = fname_counter
                    }
                
                goto (
                    target                      = 'End paradigm'
                    when                        = INFO_TargetCounter >= CTRL_NoTargets && timer_expired(ITI_Timer)
                    )
                timer_expired (
                    target                      = 'Wait for Joystick Reset'
                    timer                       = ITI_Timer
                    )
            }

            state 'End paradigm' {
                update_stimulus_display ()
                report ('==== SUMMARY: $INFO_HitCounter / $INFO_TargetCounter COINS COLLECTED ====')
                report ('==== ENDING PARADIGM ====')
                play_sound (End_sound)
                cancelTrigger                   = false
                yield ()
            }
        }
    }
    
    list 'Stopping procedures' {
        IO_syncWord = 0
        wait (
            duration = 1.0
            duration_units = s
            )
        stop_device_io (Eyelink)
        stop_device_io (mIO)
        stop_device_io (Omniplex)

        ML_sync = 0
        dequeue_stimulus (Background)
        update_stimulus_display ()
    }
}
